//
//  FractalScapeIconSet.m
//  FractalScape
//
//  Created by Taun Chapman on 11/25/14.
//  Copyright (c) 2014 MOEDAE LLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "FractalScapeIconSet.h"


@implementation FractalScapeIconSet

#pragma mark Cache

static UIColor* _symbolFillColor = nil;
static UIColor* _white5050 = nil;
static UIColor* _transformActionColor = nil;

static UIImage* _imageOfTabBarLineColorIcon = nil;
static UIImage* _imageOfTabBarFillColorIcon = nil;
static UIImage* _imageOfTabBarLinePropertiesIcon = nil;
static UIImage* _imageOfTabBarRulesIcon = nil;
static UIImage* _imageOfToolBarCopyIcon = nil;
static UIImage* _imageOfToolBarAppearanceIcon = nil;
static UIImage* _imageOfKBIconRuleDrawLine = nil;
static UIImage* _imageOfKBIconRuleMoveByLine = nil;
static UIImage* _imageOfKBIconRuleDrawDot = nil;
static UIImage* _imageOfKBIconRuleDecrementLineWidth = nil;
static UIImage* _imageOfKBIconRuleIncrementLineWidth = nil;
static UIImage* _imageOfKBIconRuleOpenPolygon = nil;
static UIImage* _imageOfKBIconRuleClosePolygon = nil;
static UIImage* _imageOfKBIconRuleDecrementAngle = nil;
static UIImage* _imageOfKBIconRuleIncrementAngle = nil;
static UIImage* _imageOfKBIconRuleRotateC = nil;
static UIImage* _imageOfKBIconRuleRotateCC = nil;
static UIImage* _imageOfKBIconRulePush = nil;
static UIImage* _imageOfKBIconRulePop = nil;
static UIImage* _imageOfKBIconRuleSwapRotation = nil;
static UIImage* _imageOfKBIconRuleReverseDirection = nil;
static UIImage* _imageOfKBIconRuleFillOn = nil;
static UIImage* _imageOfKBIconRuleFillOff = nil;
static UIImage* _imageOfKBIconRuleUpscaleLineLength = nil;
static UIImage* _imageOfKBIconRuleDownscaleLineLength = nil;
static UIImage* _imageOfKBIconRuleStrokeOff = nil;
static UIImage* _imageOfKBIconRuleStrokeOn = nil;
static UIImage* _imageOfKBIconRuleRandomizeOff = nil;
static UIImage* _imageOfKBIconRuleRandomizeOn = nil;
static UIImage* _imageOfKBIconRulePlace0 = nil;
static UIImage* _imageOfKBIconRulePlace1 = nil;
static UIImage* _imageOfKbIconRulePlace2 = nil;
static UIImage* _imageOfKBIconRulePlace3 = nil;
static UIImage* _imageOfKBIconRulePlace4 = nil;
static UIImage* _imageOfKBIconRulePlace5 = nil;
static UIImage* _imageOfKBIconRulePlaceEmpty = nil;
static UIImage* _imageOfKPathArrow = nil;
static UIImage* _imageOfControlDragCircle = nil;

#pragma mark Initialization

+ (void)initialize
{
    // Colors Initialization
    _symbolFillColor = [UIColor colorWithRed: 0.044 green: 0.451 blue: 0.782 alpha: 1];
    _white5050 = [UIColor colorWithRed: 0.501 green: 0.501 blue: 0.501 alpha: 0.244];
    _transformActionColor = [UIColor colorWithRed: 0.8 green: 0.32 blue: 0.32 alpha: 0.509];

}

#pragma mark Colors

+ (UIColor*)symbolFillColor { return _symbolFillColor; }
+ (UIColor*)white5050 { return _white5050; }
+ (UIColor*)transformActionColor { return _transformActionColor; }

#pragma mark Drawing Methods

+ (void)drawTabBarLineColorIcon
{

    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(4.5, 8.5, 16, 16)];
    [UIColor.whiteColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0.5, 0.5, 16, 16)];
    [UIColor.whiteColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(8.5, 0.5, 16, 16)];
    [UIColor.whiteColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];
}

+ (void)drawTabBarFillColorIcon
{
    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];
    UIColor* white40 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.367];

    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(8.5, 0.5, 16, 16)];
    [white40 setFill];
    [oval2Path fill];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(0.5, 0.5, 16, 16)];
    [UIColor.whiteColor setFill];
    [ovalPath fill];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(4.5, 8.5, 16, 16)];
    [white70 setFill];
    [oval3Path fill];
}

+ (void)drawTabBarLinePropertiesIcon
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(1, 7.5, 16.5, 4) byRoundingCorners: UIRectCornerTopLeft | UIRectCornerBottomLeft cornerRadii: CGSizeMake(2, 2)];
    [rectanglePath closePath];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(13, 15, 12, 3) byRoundingCorners: UIRectCornerTopRight | UIRectCornerBottomRight cornerRadii: CGSizeMake(1, 1)];
    [rectangle2Path closePath];
    [UIColor.whiteColor setFill];
    [rectangle2Path fill];
}

+ (void)drawTabBarRulesIcon
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(1.5, 2, 3, 20.5) cornerRadius: 1.5];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(17.46, 2.46)];
    [bezierPath addCurveToPoint: CGPointMake(18.23, 3.57) controlPoint1: CGPointMake(17.74, 2.71) controlPoint2: CGPointMake(17.9, 3)];
    [bezierPath addLineToPoint: CGPointMake(23.1, 12)];
    [bezierPath addCurveToPoint: CGPointMake(18.63, 19.85) controlPoint1: CGPointMake(23.1, 12.11) controlPoint2: CGPointMake(18.63, 19.85)];
    [bezierPath addCurveToPoint: CGPointMake(17.5, 21.6) controlPoint1: CGPointMake(17.9, 21.11) controlPoint2: CGPointMake(17.74, 21.4)];
    [bezierPath addCurveToPoint: CGPointMake(15.86, 21.79) controlPoint1: CGPointMake(17.01, 22.03) controlPoint2: CGPointMake(16.37, 22.08)];
    [bezierPath addCurveToPoint: CGPointMake(15.06, 20.26) controlPoint1: CGPointMake(15.23, 21.42) controlPoint2: CGPointMake(14.95, 20.84)];
    [bezierPath addCurveToPoint: CGPointMake(15.63, 19.04) controlPoint1: CGPointMake(15.14, 19.9) controlPoint2: CGPointMake(15.3, 19.61)];
    [bezierPath addCurveToPoint: CGPointMake(19.67, 12.05) controlPoint1: CGPointMake(15.63, 19.04) controlPoint2: CGPointMake(18.27, 14.46)];
    [bezierPath addCurveToPoint: CGPointMake(18.97, 10.85) controlPoint1: CGPointMake(19.31, 11.44) controlPoint2: CGPointMake(18.97, 10.85)];
    [bezierPath addCurveToPoint: CGPointMake(15.07, 3.9) controlPoint1: CGPointMake(15.3, 4.5) controlPoint2: CGPointMake(15.14, 4.21)];
    [bezierPath addCurveToPoint: CGPointMake(15.73, 2.4) controlPoint1: CGPointMake(14.95, 3.27) controlPoint2: CGPointMake(15.23, 2.69)];
    [bezierPath addCurveToPoint: CGPointMake(17.46, 2.46) controlPoint1: CGPointMake(16.37, 2.03) controlPoint2: CGPointMake(17.01, 2.08)];
    [bezierPath closePath];
    [UIColor.whiteColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];
}

+ (void)drawTabBarPageColorIcon
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(19.5, 0.5)];
    [bezierPath addCurveToPoint: CGPointMake(19.5, 24.5) controlPoint1: CGPointMake(19.5, 0.5) controlPoint2: CGPointMake(19.5, 24.5)];
    [bezierPath addLineToPoint: CGPointMake(4.5, 24.5)];
    [bezierPath addCurveToPoint: CGPointMake(4.5, 5.5) controlPoint1: CGPointMake(4.5, 24.5) controlPoint2: CGPointMake(4.5, 12.5)];
    [bezierPath addLineToPoint: CGPointMake(9.5, 5.5)];
    [bezierPath addLineToPoint: CGPointMake(9.5, 0.5)];
    [bezierPath addLineToPoint: CGPointMake(19.5, 0.5)];
    [bezierPath addLineToPoint: CGPointMake(19.5, 0.5)];
    [bezierPath closePath];
    [UIColor.whiteColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(4.5, 5.5)];
    [bezier2Path addCurveToPoint: CGPointMake(9.5, 0.5) controlPoint1: CGPointMake(7.5, 2.5) controlPoint2: CGPointMake(9.5, 0.5)];
    [UIColor.whiteColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];
}

+ (void)drawToolBarCopyIcon
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(10.77, 23)];
    [bezierPath addLineToPoint: CGPointMake(1.62, 23)];
    [bezierPath addLineToPoint: CGPointMake(1, 23)];
    [bezierPath addLineToPoint: CGPointMake(1, 22.38)];
    [bezierPath addLineToPoint: CGPointMake(1, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(1, 3)];
    [bezierPath addLineToPoint: CGPointMake(1.62, 3)];
    [bezierPath addLineToPoint: CGPointMake(16.38, 3)];
    [bezierPath addLineToPoint: CGPointMake(17, 3)];
    [bezierPath addLineToPoint: CGPointMake(17, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(17, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(16.38, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(15.77, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(17, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(17, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(17, 3.62)];
    [bezierPath addCurveToPoint: CGPointMake(17, 3.63) controlPoint1: CGPointMake(17, 3.62) controlPoint2: CGPointMake(17, 3.62)];
    [bezierPath addCurveToPoint: CGPointMake(17, 3.65) controlPoint1: CGPointMake(17, 3.64) controlPoint2: CGPointMake(17, 3.64)];
    [bezierPath addCurveToPoint: CGPointMake(17, 3.75) controlPoint1: CGPointMake(17, 3.69) controlPoint2: CGPointMake(17, 3.69)];
    [bezierPath addCurveToPoint: CGPointMake(17, 4.12) controlPoint1: CGPointMake(17, 3.9) controlPoint2: CGPointMake(17, 3.9)];
    [bezierPath addCurveToPoint: CGPointMake(17, 5.48) controlPoint1: CGPointMake(17, 4.68) controlPoint2: CGPointMake(17, 4.68)];
    [bezierPath addCurveToPoint: CGPointMake(17, 5.77) controlPoint1: CGPointMake(17, 7.38) controlPoint2: CGPointMake(17, 3.38)];
    [bezierPath addLineToPoint: CGPointMake(15.77, 5.77)];
    [bezierPath addCurveToPoint: CGPointMake(15.77, 5.48) controlPoint1: CGPointMake(15.77, 3.38) controlPoint2: CGPointMake(15.77, 7.38)];
    [bezierPath addCurveToPoint: CGPointMake(15.77, 4.12) controlPoint1: CGPointMake(15.77, 4.68) controlPoint2: CGPointMake(15.77, 4.68)];
    [bezierPath addCurveToPoint: CGPointMake(15.77, 3.75) controlPoint1: CGPointMake(15.77, 3.9) controlPoint2: CGPointMake(15.77, 3.9)];
    [bezierPath addCurveToPoint: CGPointMake(15.77, 3.65) controlPoint1: CGPointMake(15.77, 3.69) controlPoint2: CGPointMake(15.77, 3.69)];
    [bezierPath addCurveToPoint: CGPointMake(15.77, 3.63) controlPoint1: CGPointMake(15.77, 3.64) controlPoint2: CGPointMake(15.77, 3.64)];
    [bezierPath addCurveToPoint: CGPointMake(15.77, 3.62) controlPoint1: CGPointMake(15.77, 3.62) controlPoint2: CGPointMake(15.77, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(15.77, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(15.77, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(15.77, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(17, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(15.77, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(15.77, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(16.38, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(16.38, 4.23)];
    [bezierPath addLineToPoint: CGPointMake(1.62, 4.23)];
    [bezierPath addLineToPoint: CGPointMake(2.23, 3.62)];
    [bezierPath addLineToPoint: CGPointMake(2.23, 22.38)];
    [bezierPath addLineToPoint: CGPointMake(1.62, 21.77)];
    [bezierPath addLineToPoint: CGPointMake(10.77, 21.77)];
    [UIColor.whiteColor setFill];
    [bezierPath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(11.5, 8.5, 15, 18)];
    [UIColor.whiteColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Group
    {
        //// Rectangle Drawing
        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(15, 16, 7, 1)];
        [UIColor.whiteColor setFill];
        [rectanglePath fill];


        //// Rectangle 3 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 18, 20);
        CGContextRotateCTM(context, -90 * M_PI / 180);

        UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 7, 1)];
        [UIColor.whiteColor setFill];
        [rectangle3Path fill];

        CGContextRestoreGState(context);
    }
}

+ (void)drawToolBarAppearanceIcon
{
}

+ (void)drawToolBarFullScreenIcon
{
    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];
    UIColor* white40 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.367];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(4.5, 1.5, 19, 25)];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 5 Drawing
    UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRect: CGRectMake(8.5, 5.5, 11, 17)];
    [white40 setStroke];
    rectangle5Path.lineWidth = 1;
    [rectangle5Path stroke];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(10.5, 7.5, 4, 1)];
    [white40 setStroke];
    rectangle2Path.lineWidth = 1;
    CGFloat rectangle2Pattern[] = {4, 1};
    [rectangle2Path setLineDash: rectangle2Pattern count: 2 phase: 0];
    [rectangle2Path stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(10.5, 11.5, 4, 1)];
    [white40 setStroke];
    rectangle3Path.lineWidth = 1;
    CGFloat rectangle3Pattern[] = {4, 1};
    [rectangle3Path setLineDash: rectangle3Pattern count: 2 phase: 0];
    [rectangle3Path stroke];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(10.5, 15.5, 4, 1)];
    [white40 setStroke];
    rectangle4Path.lineWidth = 1;
    CGFloat rectangle4Pattern[] = {4, 1};
    [rectangle4Path setLineDash: rectangle4Pattern count: 2 phase: 0];
    [rectangle4Path stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(19.5, 5.5)];
    [bezierPath addCurveToPoint: CGPointMake(23.5, 1.5) controlPoint1: CGPointMake(23.5, 1.5) controlPoint2: CGPointMake(23.5, 1.5)];
    [white70 setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(8.5, 5.5)];
    [bezier2Path addCurveToPoint: CGPointMake(4.5, 1.5) controlPoint1: CGPointMake(4.5, 1.5) controlPoint2: CGPointMake(4.5, 1.5)];
    [white70 setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(9.5, 21.5)];
    [bezier3Path addCurveToPoint: CGPointMake(4.5, 26.5) controlPoint1: CGPointMake(4.5, 26.5) controlPoint2: CGPointMake(4.5, 26.5)];
    [white70 setStroke];
    bezier3Path.lineWidth = 1;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = UIBezierPath.bezierPath;
    [bezier4Path moveToPoint: CGPointMake(19.5, 21.5)];
    [bezier4Path addCurveToPoint: CGPointMake(23.5, 26.5) controlPoint1: CGPointMake(23.5, 27.5) controlPoint2: CGPointMake(23.5, 26.5)];
    [white70 setStroke];
    bezier4Path.lineWidth = 1;
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = UIBezierPath.bezierPath;
    [bezier5Path moveToPoint: CGPointMake(21.5, 3.5)];
    [bezier5Path addCurveToPoint: CGPointMake(23.5, 1.5) controlPoint1: CGPointMake(23.5, 1.5) controlPoint2: CGPointMake(23.5, 1.5)];
    [UIColor.whiteColor setStroke];
    bezier5Path.lineWidth = 1;
    [bezier5Path stroke];


    //// Bezier 6 Drawing
    UIBezierPath* bezier6Path = UIBezierPath.bezierPath;
    [bezier6Path moveToPoint: CGPointMake(6.5, 3.5)];
    [bezier6Path addCurveToPoint: CGPointMake(4.5, 1.5) controlPoint1: CGPointMake(4.5, 1.5) controlPoint2: CGPointMake(4.5, 1.5)];
    [UIColor.whiteColor setStroke];
    bezier6Path.lineWidth = 1;
    [bezier6Path stroke];


    //// Bezier 7 Drawing
    UIBezierPath* bezier7Path = UIBezierPath.bezierPath;
    [bezier7Path moveToPoint: CGPointMake(7.5, 23.5)];
    [bezier7Path addCurveToPoint: CGPointMake(4.5, 26.5) controlPoint1: CGPointMake(4.5, 26.5) controlPoint2: CGPointMake(4.5, 26.5)];
    [UIColor.whiteColor setStroke];
    bezier7Path.lineWidth = 1;
    [bezier7Path stroke];


    //// Bezier 8 Drawing
    UIBezierPath* bezier8Path = UIBezierPath.bezierPath;
    [bezier8Path moveToPoint: CGPointMake(20.5, 23.5)];
    [bezier8Path addCurveToPoint: CGPointMake(23.5, 26.52) controlPoint1: CGPointMake(22.5, 25.5) controlPoint2: CGPointMake(23.5, 26.52)];
    [UIColor.whiteColor setStroke];
    bezier8Path.lineWidth = 1;
    [bezier8Path stroke];
}

+ (void)drawToolBarHUDScreenIconOld
{

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(3.5, 1.5, 21, 25)];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(5.5, 4.5, 8, 5)];
    [UIColor.whiteColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(5.5, 11.5, 8, 5)];
    [UIColor.whiteColor setStroke];
    rectangle3Path.lineWidth = 1;
    [rectangle3Path stroke];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(5.5, 18.5, 8, 5)];
    [UIColor.whiteColor setStroke];
    rectangle4Path.lineWidth = 1;
    [rectangle4Path stroke];
}

+ (void)drawToolBarFullScreenIcon2
{
    //// Color Declarations
    UIColor* white40 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.367];

    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(5.5, 5.5, 4, 1)];
    [white40 setStroke];
    rectangle2Path.lineWidth = 1;
    CGFloat rectangle2Pattern[] = {4, 1};
    [rectangle2Path setLineDash: rectangle2Pattern count: 2 phase: 0];
    [rectangle2Path stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(5.5, 9.5, 4, 1)];
    [white40 setStroke];
    rectangle3Path.lineWidth = 1;
    CGFloat rectangle3Pattern[] = {4, 1};
    [rectangle3Path setLineDash: rectangle3Pattern count: 2 phase: 0];
    [rectangle3Path stroke];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(5.5, 13.5, 4, 1)];
    [white40 setStroke];
    rectangle4Path.lineWidth = 1;
    CGFloat rectangle4Pattern[] = {4, 1};
    [rectangle4Path setLineDash: rectangle4Pattern count: 2 phase: 0];
    [rectangle4Path stroke];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(12.5, 6.5, 14, 20)];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(11.16, 23)];
    [bezierPath addLineToPoint: CGPointMake(2.58, 23)];
    [bezierPath addLineToPoint: CGPointMake(2, 23)];
    [bezierPath addLineToPoint: CGPointMake(2, 22.35)];
    [bezierPath addLineToPoint: CGPointMake(2, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(2, 2)];
    [bezierPath addLineToPoint: CGPointMake(2.58, 2)];
    [bezierPath addLineToPoint: CGPointMake(16.42, 2)];
    [bezierPath addLineToPoint: CGPointMake(17, 2)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(16.42, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addCurveToPoint: CGPointMake(17, 2.66) controlPoint1: CGPointMake(17, 2.65) controlPoint2: CGPointMake(17, 2.65)];
    [bezierPath addCurveToPoint: CGPointMake(17, 2.68) controlPoint1: CGPointMake(17, 2.67) controlPoint2: CGPointMake(17, 2.67)];
    [bezierPath addCurveToPoint: CGPointMake(17, 2.79) controlPoint1: CGPointMake(17, 2.72) controlPoint2: CGPointMake(17, 2.72)];
    [bezierPath addCurveToPoint: CGPointMake(17, 3.18) controlPoint1: CGPointMake(17, 2.94) controlPoint2: CGPointMake(17, 2.94)];
    [bezierPath addCurveToPoint: CGPointMake(17, 4.6) controlPoint1: CGPointMake(17, 3.76) controlPoint2: CGPointMake(17, 3.76)];
    [bezierPath addCurveToPoint: CGPointMake(17, 4.91) controlPoint1: CGPointMake(17, 6.6) controlPoint2: CGPointMake(17, 2.4)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 4.91)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 4.6) controlPoint1: CGPointMake(15.85, 2.4) controlPoint2: CGPointMake(15.85, 6.6)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 3.18) controlPoint1: CGPointMake(15.85, 3.76) controlPoint2: CGPointMake(15.85, 3.76)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 2.79) controlPoint1: CGPointMake(15.85, 2.94) controlPoint2: CGPointMake(15.85, 2.94)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 2.68) controlPoint1: CGPointMake(15.85, 2.72) controlPoint2: CGPointMake(15.85, 2.72)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 2.66) controlPoint1: CGPointMake(15.85, 2.67) controlPoint2: CGPointMake(15.85, 2.67)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 2.65) controlPoint1: CGPointMake(15.85, 2.65) controlPoint2: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(16.42, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(16.42, 3.29)];
    [bezierPath addLineToPoint: CGPointMake(2.58, 3.29)];
    [bezierPath addLineToPoint: CGPointMake(3.15, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(3.15, 22.35)];
    [bezierPath addLineToPoint: CGPointMake(2.58, 21.71)];
    [bezierPath addLineToPoint: CGPointMake(11.16, 21.71)];
    [UIColor.whiteColor setFill];
    [bezierPath fill];
}

+ (void)drawToolBarHUDScreenIcon2
{
    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(12.5, 6.5, 14, 20)];
    [UIColor.whiteColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(11.16, 23)];
    [bezierPath addLineToPoint: CGPointMake(2.58, 23)];
    [bezierPath addLineToPoint: CGPointMake(2, 23)];
    [bezierPath addLineToPoint: CGPointMake(2, 22.35)];
    [bezierPath addLineToPoint: CGPointMake(2, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(2, 2)];
    [bezierPath addLineToPoint: CGPointMake(2.58, 2)];
    [bezierPath addLineToPoint: CGPointMake(16.42, 2)];
    [bezierPath addLineToPoint: CGPointMake(17, 2)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(16.42, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addCurveToPoint: CGPointMake(17, 2.66) controlPoint1: CGPointMake(17, 2.65) controlPoint2: CGPointMake(17, 2.65)];
    [bezierPath addCurveToPoint: CGPointMake(17, 2.68) controlPoint1: CGPointMake(17, 2.67) controlPoint2: CGPointMake(17, 2.67)];
    [bezierPath addCurveToPoint: CGPointMake(17, 2.79) controlPoint1: CGPointMake(17, 2.72) controlPoint2: CGPointMake(17, 2.72)];
    [bezierPath addCurveToPoint: CGPointMake(17, 3.18) controlPoint1: CGPointMake(17, 2.94) controlPoint2: CGPointMake(17, 2.94)];
    [bezierPath addCurveToPoint: CGPointMake(17, 4.6) controlPoint1: CGPointMake(17, 3.76) controlPoint2: CGPointMake(17, 3.76)];
    [bezierPath addCurveToPoint: CGPointMake(17, 4.91) controlPoint1: CGPointMake(17, 6.6) controlPoint2: CGPointMake(17, 2.4)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 4.91)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 4.6) controlPoint1: CGPointMake(15.85, 2.4) controlPoint2: CGPointMake(15.85, 6.6)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 3.18) controlPoint1: CGPointMake(15.85, 3.76) controlPoint2: CGPointMake(15.85, 3.76)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 2.79) controlPoint1: CGPointMake(15.85, 2.94) controlPoint2: CGPointMake(15.85, 2.94)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 2.68) controlPoint1: CGPointMake(15.85, 2.72) controlPoint2: CGPointMake(15.85, 2.72)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 2.66) controlPoint1: CGPointMake(15.85, 2.67) controlPoint2: CGPointMake(15.85, 2.67)];
    [bezierPath addCurveToPoint: CGPointMake(15.85, 2.65) controlPoint1: CGPointMake(15.85, 2.65) controlPoint2: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(17, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(15.85, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(16.42, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(16.42, 3.29)];
    [bezierPath addLineToPoint: CGPointMake(2.58, 3.29)];
    [bezierPath addLineToPoint: CGPointMake(3.15, 2.65)];
    [bezierPath addLineToPoint: CGPointMake(3.15, 22.35)];
    [bezierPath addLineToPoint: CGPointMake(2.58, 21.71)];
    [bezierPath addLineToPoint: CGPointMake(11.16, 21.71)];
    [UIColor.whiteColor setFill];
    [bezierPath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(15, 9, 4, 3)];
    [white70 setFill];
    [rectangle2Path fill];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(15, 14, 4, 3)];
    [white70 setFill];
    [rectangle3Path fill];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(15, 19, 4, 3)];
    [white70 setFill];
    [rectangle4Path fill];
}

+ (void)drawKBIconRuleDrawLine
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(31.46, 10.46)];
    [bezierPath addCurveToPoint: CGPointMake(32.23, 11.57) controlPoint1: CGPointMake(31.74, 10.71) controlPoint2: CGPointMake(31.9, 11)];
    [bezierPath addLineToPoint: CGPointMake(37.1, 20)];
    [bezierPath addCurveToPoint: CGPointMake(32.63, 27.85) controlPoint1: CGPointMake(37.1, 20.11) controlPoint2: CGPointMake(32.63, 27.85)];
    [bezierPath addCurveToPoint: CGPointMake(31.5, 29.6) controlPoint1: CGPointMake(31.9, 29.11) controlPoint2: CGPointMake(31.74, 29.4)];
    [bezierPath addCurveToPoint: CGPointMake(29.86, 29.79) controlPoint1: CGPointMake(31.01, 30.03) controlPoint2: CGPointMake(30.37, 30.08)];
    [bezierPath addCurveToPoint: CGPointMake(29.06, 28.26) controlPoint1: CGPointMake(29.23, 29.42) controlPoint2: CGPointMake(28.95, 28.84)];
    [bezierPath addCurveToPoint: CGPointMake(29.63, 27.04) controlPoint1: CGPointMake(29.14, 27.9) controlPoint2: CGPointMake(29.3, 27.61)];
    [bezierPath addCurveToPoint: CGPointMake(33.67, 20.05) controlPoint1: CGPointMake(29.63, 27.04) controlPoint2: CGPointMake(32.27, 22.46)];
    [bezierPath addCurveToPoint: CGPointMake(32.97, 18.85) controlPoint1: CGPointMake(33.31, 19.44) controlPoint2: CGPointMake(32.97, 18.85)];
    [bezierPath addCurveToPoint: CGPointMake(29.07, 11.9) controlPoint1: CGPointMake(29.3, 12.5) controlPoint2: CGPointMake(29.14, 12.21)];
    [bezierPath addCurveToPoint: CGPointMake(29.73, 10.4) controlPoint1: CGPointMake(28.95, 11.27) controlPoint2: CGPointMake(29.23, 10.69)];
    [bezierPath addCurveToPoint: CGPointMake(31.46, 10.46) controlPoint1: CGPointMake(30.37, 10.03) controlPoint2: CGPointMake(31.01, 10.08)];
    [bezierPath closePath];
    [FractalScapeIconSet.transformActionColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 28, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];
}

+ (void)drawKBIconRuleMoveByLine
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(31.46, 10.46)];
    [bezierPath addCurveToPoint: CGPointMake(32.23, 11.57) controlPoint1: CGPointMake(31.74, 10.71) controlPoint2: CGPointMake(31.9, 11)];
    [bezierPath addLineToPoint: CGPointMake(37.1, 20)];
    [bezierPath addCurveToPoint: CGPointMake(32.63, 27.85) controlPoint1: CGPointMake(37.1, 20.11) controlPoint2: CGPointMake(32.63, 27.85)];
    [bezierPath addCurveToPoint: CGPointMake(31.5, 29.6) controlPoint1: CGPointMake(31.9, 29.11) controlPoint2: CGPointMake(31.74, 29.4)];
    [bezierPath addCurveToPoint: CGPointMake(29.86, 29.79) controlPoint1: CGPointMake(31.01, 30.03) controlPoint2: CGPointMake(30.37, 30.08)];
    [bezierPath addCurveToPoint: CGPointMake(29.06, 28.26) controlPoint1: CGPointMake(29.23, 29.42) controlPoint2: CGPointMake(28.95, 28.84)];
    [bezierPath addCurveToPoint: CGPointMake(29.63, 27.04) controlPoint1: CGPointMake(29.14, 27.9) controlPoint2: CGPointMake(29.3, 27.61)];
    [bezierPath addCurveToPoint: CGPointMake(33.67, 20.05) controlPoint1: CGPointMake(29.63, 27.04) controlPoint2: CGPointMake(32.27, 22.46)];
    [bezierPath addCurveToPoint: CGPointMake(32.97, 18.85) controlPoint1: CGPointMake(33.31, 19.44) controlPoint2: CGPointMake(32.97, 18.85)];
    [bezierPath addCurveToPoint: CGPointMake(29.07, 11.9) controlPoint1: CGPointMake(29.3, 12.5) controlPoint2: CGPointMake(29.14, 12.21)];
    [bezierPath addCurveToPoint: CGPointMake(29.73, 10.4) controlPoint1: CGPointMake(28.95, 11.27) controlPoint2: CGPointMake(29.23, 10.69)];
    [bezierPath addCurveToPoint: CGPointMake(31.46, 10.46) controlPoint1: CGPointMake(30.37, 10.03) controlPoint2: CGPointMake(31.01, 10.08)];
    [bezierPath closePath];
    [FractalScapeIconSet.transformActionColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 28, 1)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    CGFloat rectanglePattern[] = {4, 4};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 5.5];
    [rectanglePath stroke];
}

+ (void)drawKBIconRuleDrawDot
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(7.5, 7.5, 25, 25)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    ovalPath.lineWidth = 1.5;
    [ovalPath stroke];
}

+ (void)drawKBIconRuleDecrementLineWidth
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(3.5, 17.5, 9, 5)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(27.5, 19.5, 10, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20);
    CGContextRotateCTM(context, 90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKBIconRuleIncrementLineWidth
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(27.5, 17.5, 10, 5)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 10, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20);
    CGContextRotateCTM(context, 90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKBIconRuleOpenPolygon
{

    //// Polygon 2 Drawing
    UIBezierPath* polygon2Path = UIBezierPath.bezierPath;
    [polygon2Path moveToPoint: CGPointMake(20, 4)];
    [polygon2Path addLineToPoint: CGPointMake(36.17, 16.09)];
    [polygon2Path addLineToPoint: CGPointMake(29.99, 35.66)];
    [polygon2Path addLineToPoint: CGPointMake(10.01, 35.66)];
    [polygon2Path addLineToPoint: CGPointMake(3.83, 16.09)];
    [polygon2Path closePath];
    [FractalScapeIconSet.white5050 setStroke];
    polygon2Path.lineWidth = 1;
    [polygon2Path stroke];


    //// Polygon Drawing
    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(32.5, 28.5)];
    [polygonPath addLineToPoint: CGPointMake(29.99, 35.66)];
    [polygonPath addLineToPoint: CGPointMake(10.01, 35.66)];
    [polygonPath addLineToPoint: CGPointMake(3.83, 16.09)];
    [polygonPath addLineToPoint: CGPointMake(20, 4)];
    [polygonPath addLineToPoint: CGPointMake(27.5, 9.5)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    polygonPath.lineWidth = 1;
    [polygonPath stroke];
}

+ (void)drawKBIconRuleClosePolygon
{

    //// Polygon Drawing
    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(20.5, 4)];
    [polygonPath addLineToPoint: CGPointMake(36.67, 16.09)];
    [polygonPath addLineToPoint: CGPointMake(30.49, 35.66)];
    [polygonPath addLineToPoint: CGPointMake(10.51, 35.66)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 16.09)];
    [polygonPath closePath];
    [FractalScapeIconSet.symbolFillColor setStroke];
    polygonPath.lineWidth = 1;
    [polygonPath stroke];
}

+ (void)drawKBIconRuleDecrementAngle
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 20, 20);
        CGContextRotateCTM(context, 90 * M_PI / 180);



        //// Oval 2 Drawing
        CGRect oval2Rect = CGRectMake(-18, -18, 36, 36);
        UIBezierPath* oval2Path = UIBezierPath.bezierPath;
        [oval2Path addArcWithCenter: CGPointMake(CGRectGetMidX(oval2Rect), CGRectGetMidY(oval2Rect)) radius: CGRectGetWidth(oval2Rect) / 2 startAngle: 189 * M_PI/180 endAngle: -7 * M_PI/180 clockwise: YES];

        [FractalScapeIconSet.transformActionColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Polygon 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -12.5, -12.5);
        CGContextRotateCTM(context, 45 * M_PI / 180);

        UIBezierPath* polygon2Path = UIBezierPath.bezierPath;
        [polygon2Path moveToPoint: CGPointMake(0, -5)];
        [polygon2Path addLineToPoint: CGPointMake(4.33, 2.5)];
        [polygon2Path addLineToPoint: CGPointMake(-4.33, 2.5)];
        [polygon2Path closePath];
        [white70 setFill];
        [polygon2Path fill];
        [FractalScapeIconSet.transformActionColor setStroke];
        polygon2Path.lineWidth = 1.5;
        [polygon2Path stroke];

        CGContextRestoreGState(context);


        //// Polygon Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 12, -12);
        CGContextRotateCTM(context, -45 * M_PI / 180);

        UIBezierPath* polygonPath = UIBezierPath.bezierPath;
        [polygonPath moveToPoint: CGPointMake(0, -5)];
        [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
        [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
        [polygonPath closePath];
        [white70 setFill];
        [polygonPath fill];
        [FractalScapeIconSet.transformActionColor setStroke];
        polygonPath.lineWidth = 1.5;
        [polygonPath stroke];

        CGContextRestoreGState(context);



        CGContextRestoreGState(context);
    }


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 14, 1)];
    [FractalScapeIconSet.white5050 setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.white5050 setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 19.95, 19.89);
    CGContextRotateCTM(context, 17.6 * M_PI / 180);

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(3.01, -0.88, 14, 1)];
    [FractalScapeIconSet.white5050 setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.white5050 setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 17.5, 5, 5)];
    [FractalScapeIconSet.white5050 setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(23.5, 19.5, 14, 1)];
    [FractalScapeIconSet.white5050 setStroke];
    rectangle3Path.lineWidth = 1;
    CGFloat rectangle3Pattern[] = {4, 4};
    [rectangle3Path setLineDash: rectangle3Pattern count: 2 phase: 11.5];
    [rectangle3Path stroke];
}

+ (void)drawKBIconRuleIncrementAngle
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 20, 20);
        CGContextRotateCTM(context, 90 * M_PI / 180);



        //// Oval 2 Drawing
        CGRect oval2Rect = CGRectMake(-18, -18, 36, 36);
        UIBezierPath* oval2Path = UIBezierPath.bezierPath;
        [oval2Path addArcWithCenter: CGPointMake(CGRectGetMidX(oval2Rect), CGRectGetMidY(oval2Rect)) radius: CGRectGetWidth(oval2Rect) / 2 startAngle: 189 * M_PI/180 endAngle: -7 * M_PI/180 clockwise: YES];

        [FractalScapeIconSet.transformActionColor setStroke];
        oval2Path.lineWidth = 1;
        [oval2Path stroke];


        //// Polygon 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, -12.5, -12.5);
        CGContextRotateCTM(context, -135 * M_PI / 180);

        UIBezierPath* polygon2Path = UIBezierPath.bezierPath;
        [polygon2Path moveToPoint: CGPointMake(0, -5)];
        [polygon2Path addLineToPoint: CGPointMake(4.33, 2.5)];
        [polygon2Path addLineToPoint: CGPointMake(-4.33, 2.5)];
        [polygon2Path closePath];
        [white70 setFill];
        [polygon2Path fill];
        [FractalScapeIconSet.transformActionColor setStroke];
        polygon2Path.lineWidth = 1.5;
        [polygon2Path stroke];

        CGContextRestoreGState(context);


        //// Polygon Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 12, -12);
        CGContextRotateCTM(context, 135 * M_PI / 180);

        UIBezierPath* polygonPath = UIBezierPath.bezierPath;
        [polygonPath moveToPoint: CGPointMake(0, -5)];
        [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
        [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
        [polygonPath closePath];
        [white70 setFill];
        [polygonPath fill];
        [FractalScapeIconSet.transformActionColor setStroke];
        polygonPath.lineWidth = 1.5;
        [polygonPath stroke];

        CGContextRestoreGState(context);



        CGContextRestoreGState(context);
    }


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 14, 1)];
    [FractalScapeIconSet.white5050 setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.white5050 setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20.01, 19.9);
    CGContextRotateCTM(context, 70 * M_PI / 180);

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(2.95, -0.86, 14, 1)];
    [FractalScapeIconSet.white5050 setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.white5050 setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 17.5, 5, 5)];
    [FractalScapeIconSet.white5050 setFill];
    [ovalPath fill];
    [FractalScapeIconSet.white5050 setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(23.5, 19.5, 14, 1)];
    [FractalScapeIconSet.white5050 setFill];
    [rectangle3Path fill];
    [FractalScapeIconSet.white5050 setStroke];
    rectangle3Path.lineWidth = 1;
    CGFloat rectangle3Pattern[] = {4, 4};
    [rectangle3Path setLineDash: rectangle3Pattern count: 2 phase: 11.5];
    [rectangle3Path stroke];
}

+ (void)drawKBIconRuleRotateC
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 23, 20.63);
    CGContextRotateCTM(context, 30 * M_PI / 180);

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 17.5, 5, 5)];
    [FractalScapeIconSet.transformActionColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(23.5, 19.5, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle3Path.lineWidth = 1;
    CGFloat rectangle3Pattern[] = {4, 4};
    [rectangle3Path setLineDash: rectangle3Pattern count: 2 phase: 11.5];
    [rectangle3Path stroke];
}

+ (void)drawKBIconRuleRotateCC
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 22.5, 18.63);
    CGContextRotateCTM(context, -30 * M_PI / 180);

    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];

    CGContextRestoreGState(context);


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 17.5, 5, 5)];
    [FractalScapeIconSet.transformActionColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(23.5, 19.5, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle3Path.lineWidth = 1;
    CGFloat rectangle3Pattern[] = {4, 4};
    [rectangle3Path setLineDash: rectangle3Pattern count: 2 phase: 11.5];
    [rectangle3Path stroke];
}

+ (void)drawKBIconRulePush
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 12);
    CGContextRotateCTM(context, -180 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(6, 24, 28, 2)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(6, 34, 28, 2)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(6, 29, 28, 2)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle3Path fill];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(6, 5, 28, 2)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle4Path fill];
}

+ (void)drawKBIconRulePop
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 18);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(6, 24, 28, 2)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(6, 34, 28, 2)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(6, 29, 28, 2)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle3Path fill];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRect: CGRectMake(6, 5, 28, 2)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle4Path fill];
}

+ (void)drawKBIconRuleSwapRotation
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 17.5, 5, 5)];
    [FractalScapeIconSet.transformActionColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(23.5, 19.5, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle3Path.lineWidth = 1;
    [rectangle3Path stroke];


    //// Oval 2 Drawing
    CGRect oval2Rect = CGRectMake(2, 2, 36, 36);
    UIBezierPath* oval2Path = UIBezierPath.bezierPath;
    [oval2Path addArcWithCenter: CGPointMake(CGRectGetMidX(oval2Rect), CGRectGetMidY(oval2Rect)) radius: CGRectGetWidth(oval2Rect) / 2 startAngle: 189 * M_PI/180 endAngle: -7 * M_PI/180 clockwise: YES];

    [FractalScapeIconSet.transformActionColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Polygon 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 7.5, 7.5);
    CGContextRotateCTM(context, -135 * M_PI / 180);

    UIBezierPath* polygon2Path = UIBezierPath.bezierPath;
    [polygon2Path moveToPoint: CGPointMake(0, -5)];
    [polygon2Path addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygon2Path addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygon2Path closePath];
    [white70 setFill];
    [polygon2Path fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygon2Path.lineWidth = 1.5;
    [polygon2Path stroke];

    CGContextRestoreGState(context);


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 32, 8);
    CGContextRotateCTM(context, 135 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKBIconRuleReverseDirection
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 17.5, 5, 5)];
    [FractalScapeIconSet.transformActionColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRect: CGRectMake(23.5, 19.5, 14, 1)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle3Path.lineWidth = 1;
    CGFloat rectangle3Pattern[] = {4, 4};
    [rectangle3Path setLineDash: rectangle3Pattern count: 2 phase: 11.5];
    [rectangle3Path stroke];


    //// Oval 2 Drawing
    CGRect oval2Rect = CGRectMake(2, 2, 36, 36);
    UIBezierPath* oval2Path = UIBezierPath.bezierPath;
    [oval2Path addArcWithCenter: CGPointMake(CGRectGetMidX(oval2Rect), CGRectGetMidY(oval2Rect)) radius: CGRectGetWidth(oval2Rect) / 2 startAngle: 189 * M_PI/180 endAngle: -7 * M_PI/180 clockwise: YES];

    [FractalScapeIconSet.transformActionColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Polygon 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 7.5, 7.5);
    CGContextRotateCTM(context, -135 * M_PI / 180);

    UIBezierPath* polygon2Path = UIBezierPath.bezierPath;
    [polygon2Path moveToPoint: CGPointMake(0, -5)];
    [polygon2Path addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygon2Path addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygon2Path closePath];
    [white70 setFill];
    [polygon2Path fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygon2Path.lineWidth = 1.5;
    [polygon2Path stroke];

    CGContextRestoreGState(context);


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 32, 8);
    CGContextRotateCTM(context, -45 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKBIconRuleFillOn
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(27.5, 17.5, 9, 5)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20);
    CGContextRotateCTM(context, 90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(3.5, 17.5, 9, 5)];
    [FractalScapeIconSet.white5050 setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];
}

+ (void)drawKBIconRuleFillOff
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(3.5, 17.5, 9, 5)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20);
    CGContextRotateCTM(context, 90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(27.5, 17.5, 9, 5)];
    [FractalScapeIconSet.white5050 setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];
}

+ (void)drawKBIconRuleUpscaleLineLength
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(6.5, 29.5, 27, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 18);
    CGContextRotateCTM(context, -180 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -4)];
    [polygonPath addLineToPoint: CGPointMake(3.46, 2)];
    [polygonPath addLineToPoint: CGPointMake(-3.46, 2)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(14.5, 9.5, 11, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];
}

+ (void)drawKBIconRuleDownscaleLineLength
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(6.5, 9.5, 27, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 18);
    CGContextRotateCTM(context, -180 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -4)];
    [polygonPath addLineToPoint: CGPointMake(3.46, 2)];
    [polygonPath addLineToPoint: CGPointMake(-3.46, 2)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(14.5, 29.5, 11, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];
}

+ (void)drawKBIconRuleStrokeOff
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Shadow Declarations
    UIColor* dropShadow = UIColor.whiteColor;
    CGSize dropShadowOffset = CGSizeMake(0.1, 1.1);
    CGFloat dropShadowBlurRadius = 0;

    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 10, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20);
    CGContextRotateCTM(context, 90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(27.5, 19.5, 10, 1)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, dropShadowOffset, dropShadowBlurRadius, [dropShadow CGColor]);
    [FractalScapeIconSet.white5050 setStroke];
    rectanglePath.lineWidth = 1;
    CGFloat rectanglePattern[] = {2, 2};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 0];
    [rectanglePath stroke];
    CGContextRestoreGState(context);
}

+ (void)drawKBIconRuleStrokeOn
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Shadow Declarations
    UIColor* dropShadow = UIColor.whiteColor;
    CGSize dropShadowOffset = CGSizeMake(0.1, 1.1);
    CGFloat dropShadowBlurRadius = 0;

    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRect: CGRectMake(27.5, 19.5, 10, 1)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectangle2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20);
    CGContextRotateCTM(context, 90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(2.5, 19.5, 10, 1)];
    [FractalScapeIconSet.white5050 setFill];
    [rectanglePath fill];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, dropShadowOffset, dropShadowBlurRadius, [dropShadow CGColor]);
    [FractalScapeIconSet.white5050 setStroke];
    rectanglePath.lineWidth = 1;
    CGFloat rectanglePattern[] = {2, 2};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 0];
    [rectanglePath stroke];
    CGContextRestoreGState(context);
}

+ (void)drawKBIconRuleRandomizeOff
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.5, 16.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 16.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(30.5, 16.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];


    //// Oval 4 Drawing
    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.5, 27.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval4Path.lineWidth = 1;
    [oval4Path stroke];


    //// Oval 5 Drawing
    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 27.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];


    //// Oval 6 Drawing
    UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(30.5, 27.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval6Path.lineWidth = 1;
    [oval6Path stroke];


    //// Oval 7 Drawing
    UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.5, 6.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval7Path.lineWidth = 1;
    [oval7Path stroke];


    //// Oval 8 Drawing
    UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(17.5, 6.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval8Path.lineWidth = 1;
    [oval8Path stroke];


    //// Oval 9 Drawing
    UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(30.5, 6.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval9Path.lineWidth = 1;
    [oval9Path stroke];
}

+ (void)drawKBIconRuleRandomizeOn
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(6.5, 19.5, 3, 3)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(16.5, 13.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];


    //// Oval 3 Drawing
    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(27.5, 14.5, 9, 9)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];


    //// Oval 4 Drawing
    UIBezierPath* oval4Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.5, 27.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval4Path.lineWidth = 1;
    [oval4Path stroke];


    //// Oval 5 Drawing
    UIBezierPath* oval5Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(18.5, 25.5, 8, 8)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval5Path.lineWidth = 1;
    [oval5Path stroke];


    //// Oval 6 Drawing
    UIBezierPath* oval6Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(30.5, 29.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval6Path.lineWidth = 1;
    [oval6Path stroke];


    //// Oval 7 Drawing
    UIBezierPath* oval7Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(3.5, 3.5, 9, 9)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval7Path.lineWidth = 1;
    [oval7Path stroke];


    //// Oval 8 Drawing
    UIBezierPath* oval8Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(19.5, 2.5, 6, 6)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval8Path.lineWidth = 1;
    [oval8Path stroke];


    //// Oval 9 Drawing
    UIBezierPath* oval9Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(30.5, 6.5, 3, 3)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    oval9Path.lineWidth = 1;
    [oval9Path stroke];
}

+ (void)drawKBIconRulePlace0
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(6, 6, 28, 28);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 5];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 2;
    CGFloat rectanglePattern[] = {4, 4};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 0];
    [rectanglePath stroke];
    {
        NSString* textContent = @"1";
        NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangleStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 16], NSForegroundColorAttributeName: FractalScapeIconSet.symbolFillColor, NSParagraphStyleAttributeName: rectangleStyle};

        CGFloat rectangleTextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawKBIconRulePlace1
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(6, 6, 28, 28);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 5];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 2;
    CGFloat rectanglePattern[] = {4, 4};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 0];
    [rectanglePath stroke];
    {
        NSString* textContent = @"2";
        NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangleStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 16], NSForegroundColorAttributeName: FractalScapeIconSet.symbolFillColor, NSParagraphStyleAttributeName: rectangleStyle};

        CGFloat rectangleTextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawKbIconRulePlace2
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(6, 6, 28, 28);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 5];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 2;
    CGFloat rectanglePattern[] = {4, 4};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 0];
    [rectanglePath stroke];
    {
        NSString* textContent = @"3";
        NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangleStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 16], NSForegroundColorAttributeName: FractalScapeIconSet.symbolFillColor, NSParagraphStyleAttributeName: rectangleStyle};

        CGFloat rectangleTextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawKBIconRulePlace3
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(6, 6, 28, 28);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 5];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 2;
    CGFloat rectanglePattern[] = {4, 4};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 0];
    [rectanglePath stroke];
    {
        NSString* textContent = @"4";
        NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangleStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 16], NSForegroundColorAttributeName: FractalScapeIconSet.symbolFillColor, NSParagraphStyleAttributeName: rectangleStyle};

        CGFloat rectangleTextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawKBIconRulePlace4
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(6, 6, 28, 28);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 5];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 2;
    CGFloat rectanglePattern[] = {4, 4};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 0];
    [rectanglePath stroke];
    {
        NSString* textContent = @"5";
        NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangleStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 16], NSForegroundColorAttributeName: FractalScapeIconSet.symbolFillColor, NSParagraphStyleAttributeName: rectangleStyle};

        CGFloat rectangleTextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawKBIconRulePlace5
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(6, 6, 28, 28);
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 5];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 2;
    CGFloat rectanglePattern[] = {4, 4};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 0];
    [rectanglePath stroke];
    {
        NSString* textContent = @"6";
        NSMutableParagraphStyle* rectangleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        rectangleStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* rectangleFontAttributes = @{NSFontAttributeName: [UIFont systemFontOfSize: 16], NSForegroundColorAttributeName: FractalScapeIconSet.symbolFillColor, NSParagraphStyleAttributeName: rectangleStyle};

        CGFloat rectangleTextHeight = [textContent boundingRectWithSize: CGSizeMake(rectangleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: rectangleFontAttributes context: nil].size.height;
        CGContextSaveGState(context);
        CGContextClipToRect(context, rectangleRect);
        [textContent drawInRect: CGRectMake(CGRectGetMinX(rectangleRect), CGRectGetMinY(rectangleRect) + (CGRectGetHeight(rectangleRect) - rectangleTextHeight) / 2, CGRectGetWidth(rectangleRect), rectangleTextHeight) withAttributes: rectangleFontAttributes];
        CGContextRestoreGState(context);
    }
}

+ (void)drawElements
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 9.5, 30.5);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);


    //// Polygon 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20);

    UIBezierPath* polygon2Path = UIBezierPath.bezierPath;
    [polygon2Path moveToPoint: CGPointMake(-5, 5)];
    [polygon2Path addLineToPoint: CGPointMake(-0.33, -0.4)];
    [polygon2Path addLineToPoint: CGPointMake(5, 5)];
    [white70 setFill];
    [polygon2Path fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    polygon2Path.lineWidth = 1.5;
    [polygon2Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKBIconRuleDrawDotFilled
{

    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(7.5, 7.5, 25, 25)];
    [FractalScapeIconSet.symbolFillColor setFill];
    [ovalPath fill];
    [FractalScapeIconSet.symbolFillColor setStroke];
    ovalPath.lineWidth = 1.5;
    [ovalPath stroke];
}

+ (void)drawKBIconRuleNextColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];
    UIColor* secondColorForTransition = [UIColor colorWithRed: 0.996 green: 0.228 blue: 0.228 alpha: 0.683];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(2.5, 2, 10, 35) cornerRadius: 3];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(27.5, 2.5, 10, 35) cornerRadius: 3];
    [secondColorForTransition setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20);
    CGContextRotateCTM(context, 90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKBIconRulePreviousColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];
    UIColor* secondColorForTransition = [UIColor colorWithRed: 0.996 green: 0.228 blue: 0.228 alpha: 0.683];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(2.5, 2, 10, 35) cornerRadius: 3];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(27.5, 2.5, 10, 35) cornerRadius: 3];
    [secondColorForTransition setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20.5, 20);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKBIconRulePlaceEmpty
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(6, 6, 28, 28) cornerRadius: 5];
    [FractalScapeIconSet.symbolFillColor setStroke];
    rectanglePath.lineWidth = 2;
    CGFloat rectanglePattern[] = {4, 4};
    [rectanglePath setLineDash: rectanglePattern count: 2 phase: 0];
    [rectanglePath stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(12.5, 27.5)];
    [bezierPath addLineToPoint: CGPointMake(27.5, 12.5)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    bezierPath.lineWidth = 1;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20.5);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(-7, 7.5)];
    [bezier2Path addLineToPoint: CGPointMake(8, -7.5)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKBIconRuleNextFillColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];
    UIColor* secondColorForTransition = [UIColor colorWithRed: 0.996 green: 0.228 blue: 0.228 alpha: 0.683];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(2.5, 2, 10, 35) cornerRadius: 3];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(27.5, 2.5, 10, 35) cornerRadius: 3];
    [secondColorForTransition setFill];
    [rectangle2Path fill];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20, 20);
    CGContextRotateCTM(context, 90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKBIconRulePreviousFillColor
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];
    UIColor* secondColorForTransition = [UIColor colorWithRed: 0.996 green: 0.228 blue: 0.228 alpha: 0.683];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(2.5, 2, 10, 35) cornerRadius: 3];
    [FractalScapeIconSet.symbolFillColor setFill];
    [rectanglePath fill];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(27.5, 2.5, 10, 35) cornerRadius: 3];
    [secondColorForTransition setFill];
    [rectangle2Path fill];


    //// Polygon Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 20.5, 20);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(0, -5)];
    [polygonPath addLineToPoint: CGPointMake(-4.33, 2.5)];
    [polygonPath addLineToPoint: CGPointMake(4.33, 2.5)];
    [polygonPath closePath];
    [white70 setFill];
    [polygonPath fill];
    [FractalScapeIconSet.transformActionColor setStroke];
    polygonPath.lineWidth = 1.5;
    [polygonPath stroke];

    CGContextRestoreGState(context);
}

+ (void)drawKPathArrow
{

    //// Polygon Drawing
    UIBezierPath* polygonPath = UIBezierPath.bezierPath;
    [polygonPath moveToPoint: CGPointMake(20, 0)];
    [polygonPath addLineToPoint: CGPointMake(37.32, 30)];
    [polygonPath addLineToPoint: CGPointMake(2.68, 30)];
    [polygonPath closePath];
    [UIColor.redColor setFill];
    [polygonPath fill];
    [UIColor.whiteColor setStroke];
    polygonPath.lineWidth = 1;
    [polygonPath stroke];
}

+ (void)drawLineEditControllerWithFrame: (CGRect)frame
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// OuterCircle Drawing
    UIBezierPath* outerCirclePath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 82.5, CGRectGetMinY(frame) + 82.5, 185, 185)];
    [UIColor.lightGrayColor setStroke];
    outerCirclePath.lineWidth = 3;
    [outerCirclePath stroke];


    //// MainLine Drawing
    UIBezierPath* mainLinePath = UIBezierPath.bezierPath;
    [mainLinePath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 100, CGRectGetMinY(frame) + 175)];
    [mainLinePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 175, CGRectGetMinY(frame) + 175)];
    [mainLinePath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 250, CGRectGetMinY(frame) + 175)];
    [FractalScapeIconSet.symbolFillColor setStroke];
    mainLinePath.lineWidth = 10;
    [mainLinePath stroke];


    //// MainInnerDashed Drawing
    UIBezierPath* mainInnerDashedPath = UIBezierPath.bezierPath;
    [mainInnerDashedPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 82, CGRectGetMinY(frame) + 175)];
    [mainInnerDashedPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 175, CGRectGetMinY(frame) + 175)];
    [mainInnerDashedPath addLineToPoint: CGPointMake(CGRectGetMinX(frame) + 267, CGRectGetMinY(frame) + 175)];
    [FractalScapeIconSet.white5050 setStroke];
    mainInnerDashedPath.lineWidth = 2;
    CGFloat mainInnerDashedPattern[] = {2, 2};
    [mainInnerDashedPath setLineDash: mainInnerDashedPattern count: 2 phase: 0];
    [mainInnerDashedPath stroke];


    //// ZeroDegreeTick Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, CGRectGetMinX(frame) + 175, CGRectGetMinY(frame) + 175);

    UIBezierPath* zeroDegreeTickPath = UIBezierPath.bezierPath;
    [zeroDegreeTickPath moveToPoint: CGPointMake(93, 0)];
    [zeroDegreeTickPath addLineToPoint: CGPointMake(83, 0)];
    [UIColor.grayColor setStroke];
    zeroDegreeTickPath.lineWidth = 2;
    [zeroDegreeTickPath stroke];

    CGContextRestoreGState(context);


    //// NinetyDegreeTick Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, CGRectGetMinX(frame) + 175, CGRectGetMinY(frame) + 175);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* ninetyDegreeTickPath = UIBezierPath.bezierPath;
    [ninetyDegreeTickPath moveToPoint: CGPointMake(93, 0)];
    [ninetyDegreeTickPath addLineToPoint: CGPointMake(83, 0)];
    [UIColor.grayColor setStroke];
    ninetyDegreeTickPath.lineWidth = 2;
    [ninetyDegreeTickPath stroke];

    CGContextRestoreGState(context);


    //// Symbol Drawing
    CGRect symbolRect = CGRectMake(CGRectGetMinX(frame) + 245, CGRectGetMinY(frame) + 153, 44, 44);
    CGContextSaveGState(context);
    UIRectClip(symbolRect);
    CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y);

    [FractalScapeIconSet drawControlDragCircle];
    CGContextRestoreGState(context);


    //// Symbol 2 Drawing
    CGRect symbol2Rect = CGRectMake(CGRectGetMinX(frame) + 116, CGRectGetMinY(frame) + 152, 44, 44);
    CGContextSaveGState(context);
    UIRectClip(symbol2Rect);
    CGContextTranslateCTM(context, symbol2Rect.origin.x, symbol2Rect.origin.y);

    [FractalScapeIconSet drawControlDragCircle];
    CGContextRestoreGState(context);


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(CGRectGetMinX(frame) + 100, CGRectGetMinY(frame) + 137, 75, 75)];
    [FractalScapeIconSet.white5050 setStroke];
    rectanglePath.lineWidth = 2;
    [rectanglePath stroke];


    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(CGRectGetMinX(frame) + 138.5, CGRectGetMinY(frame) + 174.5)];
    [bezierPath addCurveToPoint: CGPointMake(CGRectGetMinX(frame) + 138.5, CGRectGetMinY(frame) + 142.5) controlPoint1: CGPointMake(CGRectGetMinX(frame) + 138.5, CGRectGetMinY(frame) + 142.5) controlPoint2: CGPointMake(CGRectGetMinX(frame) + 138.5, CGRectGetMinY(frame) + 142.5)];
    [FractalScapeIconSet.white5050 setStroke];
    bezierPath.lineWidth = 1;
    CGFloat bezierPattern[] = {2, 2};
    [bezierPath setLineDash: bezierPattern count: 2 phase: 0];
    [bezierPath stroke];
}

+ (void)drawKCGLineCapButtIcon
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(29, 19)];
    [bezierPath addLineToPoint: CGPointMake(25, 19)];
    [bezierPath addLineToPoint: CGPointMake(25, 21)];
    [bezierPath addLineToPoint: CGPointMake(29, 21)];
    [bezierPath addLineToPoint: CGPointMake(29, 19)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(22, 19)];
    [bezierPath addLineToPoint: CGPointMake(18, 19)];
    [bezierPath addLineToPoint: CGPointMake(18, 21)];
    [bezierPath addLineToPoint: CGPointMake(22, 21)];
    [bezierPath addLineToPoint: CGPointMake(22, 19)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(15, 19)];
    [bezierPath addLineToPoint: CGPointMake(11, 19)];
    [bezierPath addLineToPoint: CGPointMake(11, 21)];
    [bezierPath addLineToPoint: CGPointMake(15, 21)];
    [bezierPath addLineToPoint: CGPointMake(15, 19)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(38, 12)];
    [bezierPath addLineToPoint: CGPointMake(38, 27)];
    [bezierPath addLineToPoint: CGPointMake(3, 27)];
    [bezierPath addLineToPoint: CGPointMake(3, 12)];
    [bezierPath addLineToPoint: CGPointMake(38, 12)];
    [bezierPath closePath];
    [FractalScapeIconSet.symbolFillColor setFill];
    [bezierPath fill];
}

+ (void)drawKCGLineCapRoundIcon
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(29, 19)];
    [bezierPath addLineToPoint: CGPointMake(25, 19)];
    [bezierPath addLineToPoint: CGPointMake(25, 21)];
    [bezierPath addLineToPoint: CGPointMake(29, 21)];
    [bezierPath addLineToPoint: CGPointMake(29, 19)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(22, 19)];
    [bezierPath addLineToPoint: CGPointMake(18, 19)];
    [bezierPath addLineToPoint: CGPointMake(18, 21)];
    [bezierPath addLineToPoint: CGPointMake(22, 21)];
    [bezierPath addLineToPoint: CGPointMake(22, 19)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(15, 19)];
    [bezierPath addLineToPoint: CGPointMake(11, 19)];
    [bezierPath addLineToPoint: CGPointMake(11, 21)];
    [bezierPath addLineToPoint: CGPointMake(15, 21)];
    [bezierPath addLineToPoint: CGPointMake(15, 19)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(33.12, 12.49)];
    [bezierPath addLineToPoint: CGPointMake(33.4, 12.56)];
    [bezierPath addCurveToPoint: CGPointMake(38, 19.13) controlPoint1: CGPointMake(36.16, 13.57) controlPoint2: CGPointMake(38, 16.19)];
    [bezierPath addCurveToPoint: CGPointMake(38, 19.5) controlPoint1: CGPointMake(38, 19.5) controlPoint2: CGPointMake(38, 19.5)];
    [bezierPath addLineToPoint: CGPointMake(38, 19.87)];
    [bezierPath addCurveToPoint: CGPointMake(33.4, 26.44) controlPoint1: CGPointMake(38, 22.81) controlPoint2: CGPointMake(36.16, 25.43)];
    [bezierPath addCurveToPoint: CGPointMake(26.68, 27) controlPoint1: CGPointMake(31.63, 27) controlPoint2: CGPointMake(29.98, 27)];
    [bezierPath addLineToPoint: CGPointMake(13.7, 27)];
    [bezierPath addCurveToPoint: CGPointMake(7.88, 26.51) controlPoint1: CGPointMake(11.02, 27) controlPoint2: CGPointMake(9.37, 27)];
    [bezierPath addLineToPoint: CGPointMake(7.6, 26.44)];
    [bezierPath addCurveToPoint: CGPointMake(3, 19.87) controlPoint1: CGPointMake(4.84, 25.43) controlPoint2: CGPointMake(3, 22.81)];
    [bezierPath addCurveToPoint: CGPointMake(3, 19.5) controlPoint1: CGPointMake(3, 19.5) controlPoint2: CGPointMake(3, 19.5)];
    [bezierPath addLineToPoint: CGPointMake(3, 19.12)];
    [bezierPath addCurveToPoint: CGPointMake(7.6, 12.56) controlPoint1: CGPointMake(3, 16.19) controlPoint2: CGPointMake(4.84, 13.57)];
    [bezierPath addCurveToPoint: CGPointMake(12.84, 12) controlPoint1: CGPointMake(9.08, 12.09) controlPoint2: CGPointMake(10.48, 12.01)];
    [bezierPath addCurveToPoint: CGPointMake(13.7, 12) controlPoint1: CGPointMake(13.11, 12) controlPoint2: CGPointMake(13.4, 12)];
    [bezierPath addCurveToPoint: CGPointMake(14.22, 12) controlPoint1: CGPointMake(13.87, 12) controlPoint2: CGPointMake(14.04, 12)];
    [bezierPath addLineToPoint: CGPointMake(14.32, 12)];
    [bezierPath addLineToPoint: CGPointMake(27.3, 12)];
    [bezierPath addCurveToPoint: CGPointMake(33.12, 12.49) controlPoint1: CGPointMake(29.98, 12) controlPoint2: CGPointMake(31.63, 12)];
    [bezierPath closePath];
    [FractalScapeIconSet.symbolFillColor setFill];
    [bezierPath fill];
}

+ (void)drawKCGLineCapSquareIcon
{

    //// Bezier Drawing
    UIBezierPath* bezierPath = UIBezierPath.bezierPath;
    [bezierPath moveToPoint: CGPointMake(29, 19)];
    [bezierPath addLineToPoint: CGPointMake(25, 19)];
    [bezierPath addLineToPoint: CGPointMake(25, 21)];
    [bezierPath addLineToPoint: CGPointMake(29, 21)];
    [bezierPath addLineToPoint: CGPointMake(29, 19)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(22, 19)];
    [bezierPath addLineToPoint: CGPointMake(18, 19)];
    [bezierPath addLineToPoint: CGPointMake(18, 21)];
    [bezierPath addLineToPoint: CGPointMake(22, 21)];
    [bezierPath addLineToPoint: CGPointMake(22, 19)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(15, 19)];
    [bezierPath addLineToPoint: CGPointMake(11, 19)];
    [bezierPath addLineToPoint: CGPointMake(11, 21)];
    [bezierPath addLineToPoint: CGPointMake(15, 21)];
    [bezierPath addLineToPoint: CGPointMake(15, 19)];
    [bezierPath closePath];
    [bezierPath moveToPoint: CGPointMake(38, 12)];
    [bezierPath addCurveToPoint: CGPointMake(38, 19) controlPoint1: CGPointMake(38, 12) controlPoint2: CGPointMake(38, 15.42)];
    [bezierPath addLineToPoint: CGPointMake(34, 19)];
    [bezierPath addLineToPoint: CGPointMake(34, 21)];
    [bezierPath addLineToPoint: CGPointMake(38, 21)];
    [bezierPath addCurveToPoint: CGPointMake(38, 27) controlPoint1: CGPointMake(38, 24.19) controlPoint2: CGPointMake(38, 27)];
    [bezierPath addLineToPoint: CGPointMake(3, 27)];
    [bezierPath addCurveToPoint: CGPointMake(3, 21) controlPoint1: CGPointMake(3, 27) controlPoint2: CGPointMake(3, 24.19)];
    [bezierPath addLineToPoint: CGPointMake(7, 21)];
    [bezierPath addLineToPoint: CGPointMake(7, 19)];
    [bezierPath addLineToPoint: CGPointMake(3, 19)];
    [bezierPath addCurveToPoint: CGPointMake(3, 12) controlPoint1: CGPointMake(3, 15.42) controlPoint2: CGPointMake(3, 12)];
    [bezierPath addLineToPoint: CGPointMake(38, 12)];
    [bezierPath closePath];
    [FractalScapeIconSet.symbolFillColor setFill];
    [bezierPath fill];
}

+ (void)drawKCGLineJoinMiterIcon
{

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(29, 2)];
    [bezier2Path addLineToPoint: CGPointMake(27, 2)];
    [bezier2Path addLineToPoint: CGPointMake(27, 6)];
    [bezier2Path addLineToPoint: CGPointMake(29, 6)];
    [bezier2Path addLineToPoint: CGPointMake(29, 2)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(29, 10)];
    [bezier2Path addLineToPoint: CGPointMake(27, 10)];
    [bezier2Path addLineToPoint: CGPointMake(27, 14)];
    [bezier2Path addLineToPoint: CGPointMake(29, 14)];
    [bezier2Path addLineToPoint: CGPointMake(29, 10)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(29, 17)];
    [bezier2Path addLineToPoint: CGPointMake(27, 17)];
    [bezier2Path addLineToPoint: CGPointMake(27, 21)];
    [bezier2Path addLineToPoint: CGPointMake(29, 21)];
    [bezier2Path addLineToPoint: CGPointMake(29, 17)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(29, 24)];
    [bezier2Path addLineToPoint: CGPointMake(27, 24)];
    [bezier2Path addCurveToPoint: CGPointMake(27, 26) controlPoint1: CGPointMake(27, 24) controlPoint2: CGPointMake(27, 25)];
    [bezier2Path addLineToPoint: CGPointMake(25, 26)];
    [bezier2Path addLineToPoint: CGPointMake(25, 28)];
    [bezier2Path addLineToPoint: CGPointMake(29, 28)];
    [bezier2Path addCurveToPoint: CGPointMake(29, 26) controlPoint1: CGPointMake(29, 28) controlPoint2: CGPointMake(29, 27)];
    [bezier2Path addCurveToPoint: CGPointMake(29, 24) controlPoint1: CGPointMake(29, 25) controlPoint2: CGPointMake(29, 24)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(22, 26)];
    [bezier2Path addLineToPoint: CGPointMake(18, 26)];
    [bezier2Path addLineToPoint: CGPointMake(18, 28)];
    [bezier2Path addLineToPoint: CGPointMake(22, 28)];
    [bezier2Path addLineToPoint: CGPointMake(22, 26)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(15, 26)];
    [bezier2Path addLineToPoint: CGPointMake(11, 26)];
    [bezier2Path addLineToPoint: CGPointMake(11, 28)];
    [bezier2Path addLineToPoint: CGPointMake(15, 28)];
    [bezier2Path addLineToPoint: CGPointMake(15, 26)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(7, 26)];
    [bezier2Path addLineToPoint: CGPointMake(3, 26)];
    [bezier2Path addLineToPoint: CGPointMake(3, 28)];
    [bezier2Path addLineToPoint: CGPointMake(7, 28)];
    [bezier2Path addLineToPoint: CGPointMake(7, 26)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(32, 0)];
    [bezier2Path addCurveToPoint: CGPointMake(32, 23) controlPoint1: CGPointMake(32, 0) controlPoint2: CGPointMake(32, 23)];
    [bezier2Path addLineToPoint: CGPointMake(32, 31)];
    [bezier2Path addLineToPoint: CGPointMake(0, 31)];
    [bezier2Path addLineToPoint: CGPointMake(0, 23)];
    [bezier2Path addLineToPoint: CGPointMake(24, 23)];
    [bezier2Path addLineToPoint: CGPointMake(24, 0)];
    [bezier2Path addLineToPoint: CGPointMake(32, 0)];
    [bezier2Path addLineToPoint: CGPointMake(32, 0)];
    [bezier2Path closePath];
    [FractalScapeIconSet.symbolFillColor setFill];
    [bezier2Path fill];
}

+ (void)drawKCGLineJoinRoundIcon
{

    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = UIBezierPath.bezierPath;
    [bezier2Path moveToPoint: CGPointMake(29, 2)];
    [bezier2Path addLineToPoint: CGPointMake(27, 2)];
    [bezier2Path addLineToPoint: CGPointMake(27, 6)];
    [bezier2Path addLineToPoint: CGPointMake(29, 6)];
    [bezier2Path addLineToPoint: CGPointMake(29, 2)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(29, 10)];
    [bezier2Path addLineToPoint: CGPointMake(27, 10)];
    [bezier2Path addLineToPoint: CGPointMake(27, 14)];
    [bezier2Path addLineToPoint: CGPointMake(29, 14)];
    [bezier2Path addLineToPoint: CGPointMake(29, 10)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(29, 17)];
    [bezier2Path addLineToPoint: CGPointMake(27, 17)];
    [bezier2Path addLineToPoint: CGPointMake(27, 21)];
    [bezier2Path addLineToPoint: CGPointMake(29, 21)];
    [bezier2Path addLineToPoint: CGPointMake(29, 17)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(29, 24)];
    [bezier2Path addLineToPoint: CGPointMake(27, 24)];
    [bezier2Path addCurveToPoint: CGPointMake(27, 26) controlPoint1: CGPointMake(27, 24) controlPoint2: CGPointMake(27, 25)];
    [bezier2Path addLineToPoint: CGPointMake(25, 26)];
    [bezier2Path addLineToPoint: CGPointMake(25, 28)];
    [bezier2Path addLineToPoint: CGPointMake(29, 28)];
    [bezier2Path addCurveToPoint: CGPointMake(29, 26) controlPoint1: CGPointMake(29, 28) controlPoint2: CGPointMake(29, 27)];
    [bezier2Path addCurveToPoint: CGPointMake(29, 24) controlPoint1: CGPointMake(29, 25) controlPoint2: CGPointMake(29, 24)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(22, 26)];
    [bezier2Path addLineToPoint: CGPointMake(18, 26)];
    [bezier2Path addLineToPoint: CGPointMake(18, 28)];
    [bezier2Path addLineToPoint: CGPointMake(22, 28)];
    [bezier2Path addLineToPoint: CGPointMake(22, 26)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(15, 26)];
    [bezier2Path addLineToPoint: CGPointMake(11, 26)];
    [bezier2Path addLineToPoint: CGPointMake(11, 28)];
    [bezier2Path addLineToPoint: CGPointMake(15, 28)];
    [bezier2Path addLineToPoint: CGPointMake(15, 26)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(7, 26)];
    [bezier2Path addLineToPoint: CGPointMake(3, 26)];
    [bezier2Path addLineToPoint: CGPointMake(3, 28)];
    [bezier2Path addLineToPoint: CGPointMake(7, 28)];
    [bezier2Path addLineToPoint: CGPointMake(7, 26)];
    [bezier2Path closePath];
    [bezier2Path moveToPoint: CGPointMake(32, 0)];
    [bezier2Path addCurveToPoint: CGPointMake(32, 23) controlPoint1: CGPointMake(32, 0) controlPoint2: CGPointMake(32, 23)];
    [bezier2Path addLineToPoint: CGPointMake(32, 27)];
    [bezier2Path addLineToPoint: CGPointMake(32, 27.2)];
    [bezier2Path addCurveToPoint: CGPointMake(29.55, 30.7) controlPoint1: CGPointMake(32, 28.77) controlPoint2: CGPointMake(31.02, 30.16)];
    [bezier2Path addCurveToPoint: CGPointMake(25.96, 31) controlPoint1: CGPointMake(28.6, 31) controlPoint2: CGPointMake(27.72, 31)];
    [bezier2Path addLineToPoint: CGPointMake(0, 31)];
    [bezier2Path addLineToPoint: CGPointMake(0, 27)];
    [bezier2Path addLineToPoint: CGPointMake(0, 23)];
    [bezier2Path addLineToPoint: CGPointMake(24, 23)];
    [bezier2Path addLineToPoint: CGPointMake(24, 0)];
    [bezier2Path addLineToPoint: CGPointMake(32, 0)];
    [bezier2Path addLineToPoint: CGPointMake(32, 0)];
    [bezier2Path closePath];
    [FractalScapeIconSet.symbolFillColor setFill];
    [bezier2Path fill];
}

+ (void)drawKCGLineJoinBevelIcon
{

    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = UIBezierPath.bezierPath;
    [bezier3Path moveToPoint: CGPointMake(29, 2)];
    [bezier3Path addLineToPoint: CGPointMake(27, 2)];
    [bezier3Path addLineToPoint: CGPointMake(27, 6)];
    [bezier3Path addLineToPoint: CGPointMake(29, 6)];
    [bezier3Path addLineToPoint: CGPointMake(29, 2)];
    [bezier3Path closePath];
    [bezier3Path moveToPoint: CGPointMake(29, 10)];
    [bezier3Path addLineToPoint: CGPointMake(27, 10)];
    [bezier3Path addLineToPoint: CGPointMake(27, 14)];
    [bezier3Path addLineToPoint: CGPointMake(29, 14)];
    [bezier3Path addLineToPoint: CGPointMake(29, 10)];
    [bezier3Path closePath];
    [bezier3Path moveToPoint: CGPointMake(29, 17)];
    [bezier3Path addLineToPoint: CGPointMake(27, 17)];
    [bezier3Path addLineToPoint: CGPointMake(27, 21)];
    [bezier3Path addLineToPoint: CGPointMake(29, 21)];
    [bezier3Path addLineToPoint: CGPointMake(29, 17)];
    [bezier3Path closePath];
    [bezier3Path moveToPoint: CGPointMake(32, 0)];
    [bezier3Path addCurveToPoint: CGPointMake(32, 23) controlPoint1: CGPointMake(32, 0) controlPoint2: CGPointMake(32, 23)];
    [bezier3Path addCurveToPoint: CGPointMake(32, 23.5) controlPoint1: CGPointMake(32, 23) controlPoint2: CGPointMake(32, 23.19)];
    [bezier3Path addCurveToPoint: CGPointMake(29, 26.5) controlPoint1: CGPointMake(32, 23.5) controlPoint2: CGPointMake(30.59, 24.91)];
    [bezier3Path addCurveToPoint: CGPointMake(29, 26) controlPoint1: CGPointMake(29, 26.21) controlPoint2: CGPointMake(29, 26)];
    [bezier3Path addCurveToPoint: CGPointMake(29, 24) controlPoint1: CGPointMake(29, 25) controlPoint2: CGPointMake(29, 24)];
    [bezier3Path addLineToPoint: CGPointMake(27, 24)];
    [bezier3Path addCurveToPoint: CGPointMake(27, 26) controlPoint1: CGPointMake(27, 24) controlPoint2: CGPointMake(27, 25)];
    [bezier3Path addLineToPoint: CGPointMake(25, 26)];
    [bezier3Path addLineToPoint: CGPointMake(25, 28)];
    [bezier3Path addLineToPoint: CGPointMake(27.5, 28)];
    [bezier3Path addCurveToPoint: CGPointMake(24.5, 31) controlPoint1: CGPointMake(25.91, 29.59) controlPoint2: CGPointMake(24.5, 31)];
    [bezier3Path addLineToPoint: CGPointMake(0, 31)];
    [bezier3Path addLineToPoint: CGPointMake(0, 23)];
    [bezier3Path addLineToPoint: CGPointMake(24, 23)];
    [bezier3Path addLineToPoint: CGPointMake(24, 0)];
    [bezier3Path addLineToPoint: CGPointMake(32, 0)];
    [bezier3Path addLineToPoint: CGPointMake(32, 0)];
    [bezier3Path closePath];
    [bezier3Path moveToPoint: CGPointMake(22, 26)];
    [bezier3Path addLineToPoint: CGPointMake(18, 26)];
    [bezier3Path addLineToPoint: CGPointMake(18, 28)];
    [bezier3Path addLineToPoint: CGPointMake(22, 28)];
    [bezier3Path addLineToPoint: CGPointMake(22, 26)];
    [bezier3Path closePath];
    [bezier3Path moveToPoint: CGPointMake(15, 26)];
    [bezier3Path addLineToPoint: CGPointMake(11, 26)];
    [bezier3Path addLineToPoint: CGPointMake(11, 28)];
    [bezier3Path addLineToPoint: CGPointMake(15, 28)];
    [bezier3Path addLineToPoint: CGPointMake(15, 26)];
    [bezier3Path closePath];
    [bezier3Path moveToPoint: CGPointMake(7, 26)];
    [bezier3Path addLineToPoint: CGPointMake(3, 26)];
    [bezier3Path addLineToPoint: CGPointMake(3, 28)];
    [bezier3Path addLineToPoint: CGPointMake(7, 28)];
    [bezier3Path addLineToPoint: CGPointMake(7, 26)];
    [bezier3Path closePath];
    [FractalScapeIconSet.symbolFillColor setFill];
    [bezier3Path fill];
}

+ (void)drawControlDragCircle
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* white70 = [UIColor colorWithRed: 1 green: 1 blue: 1 alpha: 0.692];

    //// Shadow Declarations
    UIColor* controlDialShadow = [UIColor.blackColor colorWithAlphaComponent: 0.55];
    CGSize controlDialShadowOffset = CGSizeMake(0.1, 2.1);
    CGFloat controlDialShadowBlurRadius = 4;

    //// AngleDragCircle Drawing
    UIBezierPath* angleDragCirclePath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(6.5, 5.5, 32, 32)];
    [white70 setFill];
    [angleDragCirclePath fill];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, controlDialShadowOffset, controlDialShadowBlurRadius, [controlDialShadow CGColor]);
    [FractalScapeIconSet.transformActionColor setStroke];
    angleDragCirclePath.lineWidth = 4;
    [angleDragCirclePath stroke];
    CGContextRestoreGState(context);
}

#pragma mark Generated Images

+ (UIImage*)imageOfTabBarLineColorIcon
{
    if (_imageOfTabBarLineColorIcon)
        return _imageOfTabBarLineColorIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 25), NO, 0.0f);
    [FractalScapeIconSet drawTabBarLineColorIcon];

    _imageOfTabBarLineColorIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return _imageOfTabBarLineColorIcon;
}

+ (UIImage*)imageOfTabBarFillColorIcon
{
    if (_imageOfTabBarFillColorIcon)
        return _imageOfTabBarFillColorIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 25), NO, 0.0f);
    [FractalScapeIconSet drawTabBarFillColorIcon];

    _imageOfTabBarFillColorIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return _imageOfTabBarFillColorIcon;
}

+ (UIImage*)imageOfTabBarLinePropertiesIcon
{
    if (_imageOfTabBarLinePropertiesIcon)
        return _imageOfTabBarLinePropertiesIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 25), NO, 0.0f);
    [FractalScapeIconSet drawTabBarLinePropertiesIcon];

    _imageOfTabBarLinePropertiesIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTabBarLinePropertiesIcon;
}

+ (UIImage*)imageOfTabBarRulesIcon
{
    if (_imageOfTabBarRulesIcon)
        return _imageOfTabBarRulesIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(25, 25), NO, 0.0f);
    [FractalScapeIconSet drawTabBarRulesIcon];

    _imageOfTabBarRulesIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return _imageOfTabBarRulesIcon;
}

+ (UIImage*)imageOfToolBarCopyIcon
{
    if (_imageOfToolBarCopyIcon)
        return _imageOfToolBarCopyIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), NO, 0.0f);
    [FractalScapeIconSet drawToolBarCopyIcon];

    _imageOfToolBarCopyIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return _imageOfToolBarCopyIcon;
}

+ (UIImage*)imageOfToolBarAppearanceIcon
{
    if (_imageOfToolBarAppearanceIcon)
        return _imageOfToolBarAppearanceIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(28, 28), NO, 0.0f);
    [FractalScapeIconSet drawToolBarAppearanceIcon];

    _imageOfToolBarAppearanceIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return _imageOfToolBarAppearanceIcon;
}

+ (UIImage*)imageOfKBIconRuleDrawLine
{
    if (_imageOfKBIconRuleDrawLine)
        return _imageOfKBIconRuleDrawLine;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleDrawLine];

    _imageOfKBIconRuleDrawLine = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleDrawLine;
}

+ (UIImage*)imageOfKBIconRuleMoveByLine
{
    if (_imageOfKBIconRuleMoveByLine)
        return _imageOfKBIconRuleMoveByLine;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleMoveByLine];

    _imageOfKBIconRuleMoveByLine = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleMoveByLine;
}

+ (UIImage*)imageOfKBIconRuleDrawDot
{
    if (_imageOfKBIconRuleDrawDot)
        return _imageOfKBIconRuleDrawDot;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleDrawDot];

    _imageOfKBIconRuleDrawDot = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleDrawDot;
}

+ (UIImage*)imageOfKBIconRuleDecrementLineWidth
{
    if (_imageOfKBIconRuleDecrementLineWidth)
        return _imageOfKBIconRuleDecrementLineWidth;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleDecrementLineWidth];

    _imageOfKBIconRuleDecrementLineWidth = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleDecrementLineWidth;
}

+ (UIImage*)imageOfKBIconRuleIncrementLineWidth
{
    if (_imageOfKBIconRuleIncrementLineWidth)
        return _imageOfKBIconRuleIncrementLineWidth;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleIncrementLineWidth];

    _imageOfKBIconRuleIncrementLineWidth = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleIncrementLineWidth;
}

+ (UIImage*)imageOfKBIconRuleOpenPolygon
{
    if (_imageOfKBIconRuleOpenPolygon)
        return _imageOfKBIconRuleOpenPolygon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleOpenPolygon];

    _imageOfKBIconRuleOpenPolygon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleOpenPolygon;
}

+ (UIImage*)imageOfKBIconRuleClosePolygon
{
    if (_imageOfKBIconRuleClosePolygon)
        return _imageOfKBIconRuleClosePolygon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleClosePolygon];

    _imageOfKBIconRuleClosePolygon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleClosePolygon;
}

+ (UIImage*)imageOfKBIconRuleDecrementAngle
{
    if (_imageOfKBIconRuleDecrementAngle)
        return _imageOfKBIconRuleDecrementAngle;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleDecrementAngle];

    _imageOfKBIconRuleDecrementAngle = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleDecrementAngle;
}

+ (UIImage*)imageOfKBIconRuleIncrementAngle
{
    if (_imageOfKBIconRuleIncrementAngle)
        return _imageOfKBIconRuleIncrementAngle;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleIncrementAngle];

    _imageOfKBIconRuleIncrementAngle = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleIncrementAngle;
}

+ (UIImage*)imageOfKBIconRuleRotateC
{
    if (_imageOfKBIconRuleRotateC)
        return _imageOfKBIconRuleRotateC;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleRotateC];

    _imageOfKBIconRuleRotateC = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleRotateC;
}

+ (UIImage*)imageOfKBIconRuleRotateCC
{
    if (_imageOfKBIconRuleRotateCC)
        return _imageOfKBIconRuleRotateCC;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleRotateCC];

    _imageOfKBIconRuleRotateCC = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleRotateCC;
}

+ (UIImage*)imageOfKBIconRulePush
{
    if (_imageOfKBIconRulePush)
        return _imageOfKBIconRulePush;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRulePush];

    _imageOfKBIconRulePush = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRulePush;
}

+ (UIImage*)imageOfKBIconRulePop
{
    if (_imageOfKBIconRulePop)
        return _imageOfKBIconRulePop;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRulePop];

    _imageOfKBIconRulePop = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRulePop;
}

+ (UIImage*)imageOfKBIconRuleSwapRotation
{
    if (_imageOfKBIconRuleSwapRotation)
        return _imageOfKBIconRuleSwapRotation;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleSwapRotation];

    _imageOfKBIconRuleSwapRotation = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleSwapRotation;
}

+ (UIImage*)imageOfKBIconRuleReverseDirection
{
    if (_imageOfKBIconRuleReverseDirection)
        return _imageOfKBIconRuleReverseDirection;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleReverseDirection];

    _imageOfKBIconRuleReverseDirection = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleReverseDirection;
}

+ (UIImage*)imageOfKBIconRuleFillOn
{
    if (_imageOfKBIconRuleFillOn)
        return _imageOfKBIconRuleFillOn;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleFillOn];

    _imageOfKBIconRuleFillOn = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleFillOn;
}

+ (UIImage*)imageOfKBIconRuleFillOff
{
    if (_imageOfKBIconRuleFillOff)
        return _imageOfKBIconRuleFillOff;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleFillOff];

    _imageOfKBIconRuleFillOff = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleFillOff;
}

+ (UIImage*)imageOfKBIconRuleUpscaleLineLength
{
    if (_imageOfKBIconRuleUpscaleLineLength)
        return _imageOfKBIconRuleUpscaleLineLength;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleUpscaleLineLength];

    _imageOfKBIconRuleUpscaleLineLength = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleUpscaleLineLength;
}

+ (UIImage*)imageOfKBIconRuleDownscaleLineLength
{
    if (_imageOfKBIconRuleDownscaleLineLength)
        return _imageOfKBIconRuleDownscaleLineLength;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleDownscaleLineLength];

    _imageOfKBIconRuleDownscaleLineLength = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleDownscaleLineLength;
}

+ (UIImage*)imageOfKBIconRuleStrokeOff
{
    if (_imageOfKBIconRuleStrokeOff)
        return _imageOfKBIconRuleStrokeOff;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleStrokeOff];

    _imageOfKBIconRuleStrokeOff = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleStrokeOff;
}

+ (UIImage*)imageOfKBIconRuleStrokeOn
{
    if (_imageOfKBIconRuleStrokeOn)
        return _imageOfKBIconRuleStrokeOn;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleStrokeOn];

    _imageOfKBIconRuleStrokeOn = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleStrokeOn;
}

+ (UIImage*)imageOfKBIconRuleRandomizeOff
{
    if (_imageOfKBIconRuleRandomizeOff)
        return _imageOfKBIconRuleRandomizeOff;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleRandomizeOff];

    _imageOfKBIconRuleRandomizeOff = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleRandomizeOff;
}

+ (UIImage*)imageOfKBIconRuleRandomizeOn
{
    if (_imageOfKBIconRuleRandomizeOn)
        return _imageOfKBIconRuleRandomizeOn;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRuleRandomizeOn];

    _imageOfKBIconRuleRandomizeOn = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRuleRandomizeOn;
}

+ (UIImage*)imageOfKBIconRulePlace0
{
    if (_imageOfKBIconRulePlace0)
        return _imageOfKBIconRulePlace0;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRulePlace0];

    _imageOfKBIconRulePlace0 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRulePlace0;
}

+ (UIImage*)imageOfKBIconRulePlace1
{
    if (_imageOfKBIconRulePlace1)
        return _imageOfKBIconRulePlace1;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRulePlace1];

    _imageOfKBIconRulePlace1 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRulePlace1;
}

+ (UIImage*)imageOfKbIconRulePlace2
{
    if (_imageOfKbIconRulePlace2)
        return _imageOfKbIconRulePlace2;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKbIconRulePlace2];

    _imageOfKbIconRulePlace2 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKbIconRulePlace2;
}

+ (UIImage*)imageOfKBIconRulePlace3
{
    if (_imageOfKBIconRulePlace3)
        return _imageOfKBIconRulePlace3;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRulePlace3];

    _imageOfKBIconRulePlace3 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRulePlace3;
}

+ (UIImage*)imageOfKBIconRulePlace4
{
    if (_imageOfKBIconRulePlace4)
        return _imageOfKBIconRulePlace4;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRulePlace4];

    _imageOfKBIconRulePlace4 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRulePlace4;
}

+ (UIImage*)imageOfKBIconRulePlace5
{
    if (_imageOfKBIconRulePlace5)
        return _imageOfKBIconRulePlace5;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRulePlace5];

    _imageOfKBIconRulePlace5 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRulePlace5;
}

+ (UIImage*)imageOfKBIconRulePlaceEmpty
{
    if (_imageOfKBIconRulePlaceEmpty)
        return _imageOfKBIconRulePlaceEmpty;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKBIconRulePlaceEmpty];

    _imageOfKBIconRulePlaceEmpty = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKBIconRulePlaceEmpty;
}

+ (UIImage*)imageOfKPathArrow
{
    if (_imageOfKPathArrow)
        return _imageOfKPathArrow;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [FractalScapeIconSet drawKPathArrow];

    _imageOfKPathArrow = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfKPathArrow;
}

+ (UIImage*)imageOfLineEditControllerWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [FractalScapeIconSet drawLineEditControllerWithFrame: frame];

    UIImage* imageOfLineEditController = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfLineEditController;
}

+ (UIImage*)imageOfControlDragCircle
{
    if (_imageOfControlDragCircle)
        return _imageOfControlDragCircle;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(44, 44), NO, 0.0f);
    [FractalScapeIconSet drawControlDragCircle];

    _imageOfControlDragCircle = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfControlDragCircle;
}

#pragma mark Customization Infrastructure

- (void)setTabBarLineColorIconTargets: (NSArray*)tabBarLineColorIconTargets
{
    _tabBarLineColorIconTargets = tabBarLineColorIconTargets;

    for (id target in self.tabBarLineColorIconTargets)
        [target setImage: FractalScapeIconSet.imageOfTabBarLineColorIcon];
}

- (void)setTabBarFillColorIconTargets: (NSArray*)tabBarFillColorIconTargets
{
    _tabBarFillColorIconTargets = tabBarFillColorIconTargets;

    for (id target in self.tabBarFillColorIconTargets)
        [target setImage: FractalScapeIconSet.imageOfTabBarFillColorIcon];
}

- (void)setTabBarLinePropertiesIconTargets: (NSArray*)tabBarLinePropertiesIconTargets
{
    _tabBarLinePropertiesIconTargets = tabBarLinePropertiesIconTargets;

    for (id target in self.tabBarLinePropertiesIconTargets)
        [target setImage: FractalScapeIconSet.imageOfTabBarLinePropertiesIcon];
}

- (void)setTabBarRulesIconTargets: (NSArray*)tabBarRulesIconTargets
{
    _tabBarRulesIconTargets = tabBarRulesIconTargets;

    for (id target in self.tabBarRulesIconTargets)
        [target setImage: FractalScapeIconSet.imageOfTabBarRulesIcon];
}

- (void)setToolBarCopyIconTargets: (NSArray*)toolBarCopyIconTargets
{
    _toolBarCopyIconTargets = toolBarCopyIconTargets;

    for (id target in self.toolBarCopyIconTargets)
        [target setImage: FractalScapeIconSet.imageOfToolBarCopyIcon];
}

- (void)setToolBarAppearanceIconTargets: (NSArray*)toolBarAppearanceIconTargets
{
    _toolBarAppearanceIconTargets = toolBarAppearanceIconTargets;

    for (id target in self.toolBarAppearanceIconTargets)
        [target setImage: FractalScapeIconSet.imageOfToolBarAppearanceIcon];
}

- (void)setKBIconRuleDrawLineTargets: (NSArray*)kBIconRuleDrawLineTargets
{
    _kBIconRuleDrawLineTargets = kBIconRuleDrawLineTargets;

    for (id target in self.kBIconRuleDrawLineTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleDrawLine];
}

- (void)setKBIconRuleMoveByLineTargets: (NSArray*)kBIconRuleMoveByLineTargets
{
    _kBIconRuleMoveByLineTargets = kBIconRuleMoveByLineTargets;

    for (id target in self.kBIconRuleMoveByLineTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleMoveByLine];
}

- (void)setKBIconRuleDrawDotTargets: (NSArray*)kBIconRuleDrawDotTargets
{
    _kBIconRuleDrawDotTargets = kBIconRuleDrawDotTargets;

    for (id target in self.kBIconRuleDrawDotTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleDrawDot];
}

- (void)setKBIconRuleDecrementLineWidthTargets: (NSArray*)kBIconRuleDecrementLineWidthTargets
{
    _kBIconRuleDecrementLineWidthTargets = kBIconRuleDecrementLineWidthTargets;

    for (id target in self.kBIconRuleDecrementLineWidthTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleDecrementLineWidth];
}

- (void)setKBIconRuleIncrementLineWidthTargets: (NSArray*)kBIconRuleIncrementLineWidthTargets
{
    _kBIconRuleIncrementLineWidthTargets = kBIconRuleIncrementLineWidthTargets;

    for (id target in self.kBIconRuleIncrementLineWidthTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleIncrementLineWidth];
}

- (void)setKBIconRuleOpenPolygonTargets: (NSArray*)kBIconRuleOpenPolygonTargets
{
    _kBIconRuleOpenPolygonTargets = kBIconRuleOpenPolygonTargets;

    for (id target in self.kBIconRuleOpenPolygonTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleOpenPolygon];
}

- (void)setKBIconRuleClosePolygonTargets: (NSArray*)kBIconRuleClosePolygonTargets
{
    _kBIconRuleClosePolygonTargets = kBIconRuleClosePolygonTargets;

    for (id target in self.kBIconRuleClosePolygonTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleClosePolygon];
}

- (void)setKBIconRuleDecrementAngleTargets: (NSArray*)kBIconRuleDecrementAngleTargets
{
    _kBIconRuleDecrementAngleTargets = kBIconRuleDecrementAngleTargets;

    for (id target in self.kBIconRuleDecrementAngleTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleDecrementAngle];
}

- (void)setKBIconRuleIncrementAngleTargets: (NSArray*)kBIconRuleIncrementAngleTargets
{
    _kBIconRuleIncrementAngleTargets = kBIconRuleIncrementAngleTargets;

    for (id target in self.kBIconRuleIncrementAngleTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleIncrementAngle];
}

- (void)setKBIconRuleRotateCTargets: (NSArray*)kBIconRuleRotateCTargets
{
    _kBIconRuleRotateCTargets = kBIconRuleRotateCTargets;

    for (id target in self.kBIconRuleRotateCTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleRotateC];
}

- (void)setKBIconRuleRotateCCTargets: (NSArray*)kBIconRuleRotateCCTargets
{
    _kBIconRuleRotateCCTargets = kBIconRuleRotateCCTargets;

    for (id target in self.kBIconRuleRotateCCTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleRotateCC];
}

- (void)setKBIconRulePushTargets: (NSArray*)kBIconRulePushTargets
{
    _kBIconRulePushTargets = kBIconRulePushTargets;

    for (id target in self.kBIconRulePushTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRulePush];
}

- (void)setKBIconRulePopTargets: (NSArray*)kBIconRulePopTargets
{
    _kBIconRulePopTargets = kBIconRulePopTargets;

    for (id target in self.kBIconRulePopTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRulePop];
}

- (void)setKBIconRuleSwapRotationTargets: (NSArray*)kBIconRuleSwapRotationTargets
{
    _kBIconRuleSwapRotationTargets = kBIconRuleSwapRotationTargets;

    for (id target in self.kBIconRuleSwapRotationTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleSwapRotation];
}

- (void)setKBIconRuleReverseDirectionTargets: (NSArray*)kBIconRuleReverseDirectionTargets
{
    _kBIconRuleReverseDirectionTargets = kBIconRuleReverseDirectionTargets;

    for (id target in self.kBIconRuleReverseDirectionTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleReverseDirection];
}

- (void)setKBIconRuleFillOnTargets: (NSArray*)kBIconRuleFillOnTargets
{
    _kBIconRuleFillOnTargets = kBIconRuleFillOnTargets;

    for (id target in self.kBIconRuleFillOnTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleFillOn];
}

- (void)setKBIconRuleFillOffTargets: (NSArray*)kBIconRuleFillOffTargets
{
    _kBIconRuleFillOffTargets = kBIconRuleFillOffTargets;

    for (id target in self.kBIconRuleFillOffTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleFillOff];
}

- (void)setKBIconRuleUpscaleLineLengthTargets: (NSArray*)kBIconRuleUpscaleLineLengthTargets
{
    _kBIconRuleUpscaleLineLengthTargets = kBIconRuleUpscaleLineLengthTargets;

    for (id target in self.kBIconRuleUpscaleLineLengthTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleUpscaleLineLength];
}

- (void)setKBIconRuleDownscaleLineLengthTargets: (NSArray*)kBIconRuleDownscaleLineLengthTargets
{
    _kBIconRuleDownscaleLineLengthTargets = kBIconRuleDownscaleLineLengthTargets;

    for (id target in self.kBIconRuleDownscaleLineLengthTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleDownscaleLineLength];
}

- (void)setKBIconRuleStrokeOffTargets: (NSArray*)kBIconRuleStrokeOffTargets
{
    _kBIconRuleStrokeOffTargets = kBIconRuleStrokeOffTargets;

    for (id target in self.kBIconRuleStrokeOffTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleStrokeOff];
}

- (void)setKBIconRuleStrokeOnTargets: (NSArray*)kBIconRuleStrokeOnTargets
{
    _kBIconRuleStrokeOnTargets = kBIconRuleStrokeOnTargets;

    for (id target in self.kBIconRuleStrokeOnTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleStrokeOn];
}

- (void)setKBIconRuleRandomizeOffTargets: (NSArray*)kBIconRuleRandomizeOffTargets
{
    _kBIconRuleRandomizeOffTargets = kBIconRuleRandomizeOffTargets;

    for (id target in self.kBIconRuleRandomizeOffTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleRandomizeOff];
}

- (void)setKBIconRuleRandomizeOnTargets: (NSArray*)kBIconRuleRandomizeOnTargets
{
    _kBIconRuleRandomizeOnTargets = kBIconRuleRandomizeOnTargets;

    for (id target in self.kBIconRuleRandomizeOnTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRuleRandomizeOn];
}

- (void)setKBIconRulePlace0Targets: (NSArray*)kBIconRulePlace0Targets
{
    _kBIconRulePlace0Targets = kBIconRulePlace0Targets;

    for (id target in self.kBIconRulePlace0Targets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRulePlace0];
}

- (void)setKBIconRulePlace1Targets: (NSArray*)kBIconRulePlace1Targets
{
    _kBIconRulePlace1Targets = kBIconRulePlace1Targets;

    for (id target in self.kBIconRulePlace1Targets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRulePlace1];
}

- (void)setKbIconRulePlace2Targets: (NSArray*)kbIconRulePlace2Targets
{
    _kbIconRulePlace2Targets = kbIconRulePlace2Targets;

    for (id target in self.kbIconRulePlace2Targets)
        [target setImage: FractalScapeIconSet.imageOfKbIconRulePlace2];
}

- (void)setKBIconRulePlace3Targets: (NSArray*)kBIconRulePlace3Targets
{
    _kBIconRulePlace3Targets = kBIconRulePlace3Targets;

    for (id target in self.kBIconRulePlace3Targets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRulePlace3];
}

- (void)setKBIconRulePlace4Targets: (NSArray*)kBIconRulePlace4Targets
{
    _kBIconRulePlace4Targets = kBIconRulePlace4Targets;

    for (id target in self.kBIconRulePlace4Targets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRulePlace4];
}

- (void)setKBIconRulePlace5Targets: (NSArray*)kBIconRulePlace5Targets
{
    _kBIconRulePlace5Targets = kBIconRulePlace5Targets;

    for (id target in self.kBIconRulePlace5Targets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRulePlace5];
}

- (void)setKBIconRulePlaceEmptyTargets: (NSArray*)kBIconRulePlaceEmptyTargets
{
    _kBIconRulePlaceEmptyTargets = kBIconRulePlaceEmptyTargets;

    for (id target in self.kBIconRulePlaceEmptyTargets)
        [target setImage: FractalScapeIconSet.imageOfKBIconRulePlaceEmpty];
}

- (void)setKPathArrowTargets: (NSArray*)kPathArrowTargets
{
    _kPathArrowTargets = kPathArrowTargets;

    for (id target in self.kPathArrowTargets)
        [target setImage: FractalScapeIconSet.imageOfKPathArrow];
}

- (void)setControlDragCircleTargets: (NSArray*)controlDragCircleTargets
{
    _controlDragCircleTargets = controlDragCircleTargets;

    for (id target in self.controlDragCircleTargets)
        [target setImage: FractalScapeIconSet.imageOfControlDragCircle];
}


@end
