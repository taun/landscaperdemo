{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;\f2\fnil\fcharset0 Menlo-Bold;
}
{\colortbl;\red255\green255\blue255;\red247\green247\blue247;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 2013-07-18\
Currently, the plist default definition axioms and rules are a miss mash of old and new mappings. Need to compare old and new to see how to change the new rules consistently. \
\
Types of values -\
	Placeholder\
	Drawing rule\
	?\
\
Was in the middle of changing how the rules work. \
	Certain letters for replacement placeholders - a,b,c,d,e,f\
	Certain letters for a drawing rule\
	Certain numbers for color placeholders?\
	Idea is to use the full ascii 7 bit range. Axioms and rules can then be handled as bytes. Not really and need for letters. Can possibly just replace letters with byte values on import using a map.\
	User display of rules and axioms is graphical and uses map. Possibly a custom font.\
2014-08-30\
Lots to do.\
	0) Fix gestures in HUDs. \
		Pinch gesture in level 0 for width\
		Main view Double finger pan left/right changes width - same as level0 pinch?\
						up/down changes angle - same as level 1 rotation?\
		Gesture thoughts:\
			level0 - \
			level1 - \
			level2 - \
			levelN - \
\
	1) Change segment to hold randomize value (0 = no randomize), have segment return appropriate lengths and angles pre-randomized.\
	2) 
\f1 \uc0\u10003 
\f0 Change all commands to have "command" prefix?\
	3) 
\f1 \uc0\u10003 
\f0 Finish cleaning up commands as above.\
	4) 
\f1 \uc0\u10003 
\f0 Use paintcode to make command images rather than using fonts.\
	5) Rather than a keyboard, have a non-scrolling bottom section of the rules popover which is a drag and drop source of commands?\
2014-10-09\
	Have Controller be delegate\
	add controller methods/properties which supply data source with data\
	add controller methods/properties which supply cell for indexPath\
		above implies dataSource collectionViews and cells come from controller and can be accessed at controller level by indexPath\
	can fractal data be mapped to an indexPath?\
	Fractal model as tree node\
		Section - local properties = fractal.name, desc, ..\
			   			fractal.axiom\
		Section - replacement rules = replacementRules\
		Section - Rules = fractal.drawingRulesType.rules\
	Change rules and replacementRules to orderedSets\
	Have array of model keys for section index and ?\
	or pass arrayed copy of data (via delegate properties) to source and repass when changed?\
2014-10-17\
	Drag and drop cases\
\
	Assumption - EVERY rule is unique, ALL rules are copied from LSDrawingRuleType.rules\
		rules dragged from the source are mutableCopy'd making them unique.\
		once the rule is dropped in a destination, it is only moved or deleted.\
	Cases -\
		From source to - copy and \
			startingRules - insert\
			replacement.rules - insert\
			replacement.contextRule - replace\
		Drag within 3 possible destinations\
			move/exchange indexes\
		Drag out of 3 possible destinations\
			delete except replacement.contextRule - do nothing\
		Drag between 3 possible destinations\
			do nothing or delete from source and drop in destination including replacement.contextRule?\
	Implementation\
		Separate Delegate class for each type of collection? NO.\
		Separate mini-controller class - for each table cell type.\
		Assign mini-controller to cell, mini-controller has source and view so it can modify both.\
		Common methods/protocol\
		Axiom Controller - Associate controller with cell, pass touchpoint and draggingRule to controller dragStart/Change/End methods.\
				each miniController handles cases of copy versus move versus delete, ....\
\
	dragDidEnterCollectionView\
	dragDidLeaveCollectionView\
	dragDidChangeInCollectionView\
	dragDidEndInCollectionView\
2014-10-31\
	calculate collection row height vs width to get rid of hard coded width of 22 items.\
\
\
2014-11-22\
	reordering color indexes\
	Initial Colors - a1 a2 a3 a4 a5 a6\
	Move a2 to before a5\
	for i < a2, leave alone\
	for i > a2 && < a6, decrement\
	for i > a5, leave alone\
	a2 changes to a5\
\
2014-11-23\
	Set default lineCap and join in generator code\
	Add rules for lineCap and join.\
	Add info box to rules view for help.\
	Add corner number indicators for HUDs\
	Add angle graphic indicator which animates angle change.\
	Merge color stroke and fill shelf.\
	Change from table to full layout in scroll view like MailBoxes messageView.\
	Finish color drag and drop.\
\
2014-12-03\
	Notes re. tile moves\
\pard\pardeftab720\sl220
\cf0 \cb2 Any time the new rule is first moved to a list, it would be an insert.\
 \
 Any subsequent move will on be a transposition of 2 ADJACENT VIEWS.\
 This means just swapping the constraints of the view to the left or right of the view being moved.\
 Only exception is a vertical move. However, in general, a move is a transfer of constraints. There\
 are NO NEW CONSTRAINTS.\
 \
 Use two separate arrays. One for views and one for the constraints. Then insert or move view in \
 views array and map constraints array to views. Check if constraint is deifferent and if so, re-assign.\
 \
 Further thoughts:\
 A move is a transposition of constraint constants. Chaining from the lower index to higher index.\
 An insert is a chaining of constraint constants from the insertion index to end index.\
 A remove is a chaining of constraint constants from the removal index to the end index.\
 \
 Insertion:\
    "Move group starting at index+0 right"\
    Add view at insertion index.\
    copy constraints from view already at insertion index.\
    copy constraint constants from insertion index+1 to old view at index until reaching the end.\
    calculate new constants for end view.\
    Update views array and rules\
 \
 Removal:\
    "Move group starting at index + 1 left."\
    copy constraint constants from view at deletion index to view at index+1 until reaching end.\
    Remove view at deletion index.\
    Update views array and rules\
 \
 Transpose Left: fIndex, tIndex\
    Swapping with a tile to the left\
    Copy constraint constants from fIndex (movedView) to findex-1 until tIndex+1\
    Copy constraint constants from tIndex to movedView.\
    Update movedView and rule array position\
 \
 Transpose Right: fIndex, tIndex\
    Swapping with a tile to the right\
    Copy constraint constants from fIndex (movedView) to findex+1 until tIndex-1\
    Copy constraint constants from tIndex to movedView.\
    Update movedView and rule array position\
 \
 * Transpose Any Direction: fIndex, tIndex, direction (right = +1, left = -1)\
    Swapping two tiles\
    Copy constraint constants from fIndex (movedView) to findex+direction until tIndex-direction\
    Copy constraint constants from tIndex to movedView.\
    Update movedView and rule array position\
\
Went with --------\
Important note\
 \
 Method to create a new constraint for a new view at insertion index.\
 Call above method for updateConstraints.\
 Stateless - calculates constants independent of a loop.\
 One method for creating constraint another for setting constants.\
 updateConstraints -> ForIn rules to add views, constraints, constants\
 insert/remove/trans - > ForIn views to change constants\
 2 arrays? before and after and animate\
 Just re-run constants after inserting or deleting views. Use identifier to specify h vs v constraint?\
\
2014-12-05\
	Make sure autolayout height of tileableViews is set independent of the tiles.\
\
2015-01-11\
	Benchmarks\
	Recursive Sierpinsky Gasket\
	
\f2\b\fs22 \cb1 \CocoaLigature0 2015-01-11 14:48:05.667 FractalScape[31898:8134935] Recursive execution time: 1.06ms\
\pard\tx626\pardeftab626\pardirnatural
\cf0 4	2015-01-11 14:48:05.804 FractalScape[31898:8134935] Recursive execution time: 1.32ms\
5	2015-01-11 14:48:08.582 FractalScape[31898:8134935] Recursive execution time: 1.37ms\
6	2015-01-11 14:48:09.263 FractalScape[31898:8134935] Recursive execution time: 3.58ms\
7	2015-01-11 14:48:10.094 FractalScape[31898:8134935] Recursive execution time: 11.86ms\
\
\pard\pardeftab720\sl220

\f0\b0\fs24 \cf0 \cb2 \CocoaLigature1 Deterministic looping depth first drawing\
	Loop by startingRule\
		currentRule\
		Loop by replacement level\
			if there is a replacement,\
				loop replacement\
			else evaluate current rule\
\
\
2015-01-22\
regenerateRules called for production changes calls updateGeneratorLevels on main queue when done\
updateGeneratorLevels sets generator level data\
updateImageViews called for appearance and angle changes, sets segment data and initializes caches (generate cache in fractal and pass to generator?)\
\
Use a private queue fractal to generate production levels (regenerateRules) then use a call back when done to update fractal views (updateImageViews). main queue \
Callback initiates getting levels from privateFractal\
remember to reset private queue context (to acquire changes) before generating levels.\
in updateImageViews privateFractalBlock, set generator nsdata, baseSegment, level?...\
Then queue up generator operations.\
\
set generator segment when setting fractal and set fractal in privateFractal block during updateImageViews, level will have already been set in updateGeneratorLevels\
\
2015-02-06\
	Adaptive layout and traits.\
	Rules tab popover is like a splitView which goes from side by side split (landscape mode) to top bottom split (portrait mode) \
	controller should change trait size class depending on orientation. compact width for landscape mode. Compact height for portrait mode.\
	Override using setOverrideTraitCollection: forChildViewController: in which controller? Set in a parent or containing controller.\
\
2015-02-15\
Rethinking core-date for persistence and how to get cloud sync and share.\
\
1) ONLY the fractal needs to be saved/persisted. The colors and rules are read-only and static. Perhaps should be loaded from Plist at startup, stored in a non-coreData object and used as the source. There is no writing of colors or rules!\
2) Seriously considering document model. Just save the fractal as an xml document or plist. Same plist as is used to load the sample fractals just in reverse. Basically the equivalent of saving a couple of sentences.\
\
Need plist of available filters.\
Need filter property for fractal.\
\
CloudKit Notes\
\
	Does not include persistence. Therefore still need persistence of local data.\
	Bootstrap fractal colors, rules and initial fractals from smaug linode web server plist files.\
\
2015-03-21\
	UIDocument\
	FractalInfo is just identifier, USL and modification date. Does not load or create UIDocument.\
	Sort FractalInfos by mod date.\
	Load document in background when cell is showing.\
\
	Change to creating a document rather than info?\
\
2015-05-05\
	Memory leak of filter image\
	The filter is being applied twice. Once when the filters list change is observed and once when the resulting method call toggles the applyFilters property which is also observed. \
	\
	Want:\
		any change to the filters list requeues image generation without the extra applyFilters toggle call.\
		ideally a way to toggle the applyFilters without triggering KVO.\
\
2015-06-20\
	Preparing for release - Remove in-App features. PDF Vector save, \
\
2015-07-22\
	Rules layout is again broken on rotation.\
	Re-added setting preferredSize on appearanceView in IB - no improvement.\
	Printing updateConstraints to log for all view classes involved.\
	goes to 101 on initial display \
	Rotation is post 101\
\
	Try again portrait start, \
	colors goes to 20\
	rules goes to 35\
\
	rotate\
	rules goes to 46 and is overlapping outline of rest of table. Rules source is too high, breaking constraint between outline bottom and rulesSource top.\
	Bottom constraint on MDKDesignable is greyed out on designable but full black on rulesTypeView.\
\
	RulesSource Y position of wrong! Too high and too low.\
	ScrollViewContent height is right. Just the rules are offset with wrong Y.\
\
	*** ScrollView ContentView is not getting a needed "setNeedsLayout"\
\
2015-07-25\
	Get rid of potential CF retain release bugs and thrashing by\
		 only release _baseSegment colors on dealloc\
		create array for hue colors, lazy instantiate based on hueIncrement percent \
\
\
}